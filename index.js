// üåûüåûüåûüåûüåû–ú–æ–¥—É–ª—å 1.üåûüåûüåûüåûüåû
// üåª –ú–æ–¥—É–ª—å 1 (–£—Ä–æ–∫ 1). –ó–º—ñ–Ω–Ω—ñ —Ç–∞ —Ç–∏–ø–∏.

// const value = prompt('Java Script');
  // if(value === 'js') {
  //   alert('YES');
  // } else {
  //   alert('NO')
  // }
  // console.log(value);

// const userInput = prompt('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ');
// const parsedInput = Number(userInput);
// if (isNaN(parsedInput)) {
//   console.log('—Ü–µ –Ω–µ —á–∏—Å–ª–æ');
// } else if (parsedInput === 0) {
//   console.log('—Ü–µ –Ω—É–ª—å');
// } else if (parsedInput > 0) {
//   console.log('yes');
// } else {
//   console.log('no');
// }

  // const userInput = Number(prompt('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ'));
  // console.log(userInput % 2 ? '–Ω–µ –ø–∞—Ä–Ω–µ' : '–ø–∞—Ä–Ω–µ');

  // if(!0) { // –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ! —Ä–æ–±–∏–º–æ true –≤ if
  //   console.log('00000')
  // } else {
  //   console.log('0')
  // }

// üåª–ú–æ–¥—É–ª—å 1 (–£—Ä–æ–∫ 2). –†–æ–∑–≥–∞–ª—É–∂–µ–Ω–Ω—è. –¶–∏–∫–ª–∏.

  // const a = 90;
  // const b = 130;
  // if(a > 100 && b > 100) {
  //   console.log(a > b ? a : b);
  // }else {
  //   console.log(b + 512);
  // }

  // let link = 'https://my-site.com/about';
  // if(!(link[link.length - 1] === '/')) {
  //   link += '/';
  // };
  // console.log(link);
  
  let link = 'https://my-site.com/about';
  if(!link.endsWith('/')) {
    link += '/'
  };
  console.log(link);

  // let link = 'https://my-site.com/about';
  // if(!link.endsWith('/') && link.includes('my-site')) {
  //     link += '/'
  // } 
  // console.log(link);

  // let link = 'https://my-site.com/about';
  // console.log(!link.endsWith('/') && link.includes('my-site') ? link += '/' : link);

  // const daysDeadline = 5;
  // switch(daysDeadline) {
  //   case 0: console.log('—Å—å–æ–≥–æ–¥–Ω—ñ');
  //   break;
  //   case 1: console.log('–∑–∞–≤—Ç—Ä–∞');
  //   break;
  //   case 2: console.log('–ø—ñ—Å–ª—è –∑–∞–≤—Ç—Ä–∞');
  //   break;
  //   default: console.log('–¥–∞—Ç–∞ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É');
  // };

  // function caseInSwitch(val) {
  //   let answer = "";
  //   switch(val) {
  //     case 1:
  //       answer = "alpha";
  //       break;
  //     case 2:
  //       answer = "beta";
  //       break;
  //     case 3:
  //       answer = "gamma";
  //       break;
  //     case 4:
  //       answer = "delta";
  //       break;
  //   }
  //   return answer;
  // };
  // console.log(caseInSwitch(1));

// let count = 0;
// function cc(card) {
//   switch(card) {
//     case 2:
//     case 3:
//     case 4:
//     case 5:
//     case 6: 
//       count += 1;
//       break;
//     case 7:
//     case 8:
//     case 9: 
//       count;
//       break;
//     case 10:
//     case 'J':
//     case 'Q':
//     case 'K':
//     case 'A':
//       count -= 1;
//       break;
//   }
//   return count > 0 ? `${count} Bet`: `${count} Hold`;
// };
// console.log(cc(2)); console.log(cc(3)); console.log(cc(7)); 
// console.log(cc('K')); console.log(cc('A'));

  // const min = 50;
  // const max = 100;
  // for(let i = min; i <= max && i >= min; i +=1) {
  //   if(!(i % 5)) {
  //     console.log(i);
  //   }
  // }
  
// let a = 15;
// if (true) {
//   let a = 1;
//     a = 25;
// }
// console.log(a);

// const myArray = [1, 'Hello', true, [1, 2, 3]];
// for (let i = 0; i < myArray.length; i += 1) {
//   const item = myArray[i];
//   if (Array.isArray(item)) {
//     for (let j = 0; j < item.length; j += 1) {
//       console.log(item[j])
//     }
//     continue;
//   }
//   console.log(myArray[i])
// };
// console.log(Array.isArray(myArray));
// myArray.push();

// const fruits = ['üçÖ', 'üçé', 'üçì', 'üçê', 'üçå'];
// for (let i = 0; i < fruits.length; i += 1) {
//   console.log(`${i+1} - ${fruits[i]}`);
// }

// const fruits = ['üçÖ', 'üçé', 'üçì', 'üçê', 'üçå'];
// for (let i = 0, n = 1; i < fruits.length; i += 1, n +=1 ) {
//   console.log(`${n} - ${fruits[i]}`);
// }

// const names = 'Bob,Max,Dilan,Artem';
// const phones = '11111,22222,33333,44444';
// const namesArr = names.split(',');
// const phonesArr = phones.split(',');
// // console.log(namesArr);
// for (let i = 0; i < namesArr.length, i < phonesArr.length; i += 1){
//   console.log(`${namesArr[i]} - ${phonesArr[i]}`)
// }

// const string = 'Welcome to the future';
// const arr = string.split(' ');
// arr.pop();
// arr.shift();
// const result = arr.join(' ');
// const result1 = string.split(' ').slice(1, -1).join(' ');
// console.log(result); // to the
// console.log(result1); // to the

// ---------------------------------------------------
// const langs = ['php', 'js', 'ruby', 'c++', 'haskel'];
// // for (let i = 1; i < langs.length; i++) {
// //   if (langs[0] > langs[i]) {
// //     const result = langs.splice(i, 1)[0];
// //     langs.unshift(result);
// //   }
// // }
// // console.log(langs); // ¬†['c++', 'haskel', 'js', 'php', 'ruby']
// // –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –±—É–ª—å–±–∞—à–∫–æ—é
// for (let i = 0; i < langs.length; i++) {
//   for (let j = 0; j < langs.length - 1 - i; j++) {
//     if (langs[j] > langs[j + 1]) {
//       // –ú—ñ–Ω—è—î–º–æ –º—ñ—Å—Ü—è–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –≤ –ø–æ—Ä—è–¥–∫—É
//       const temp = langs[j];
//       langs[j] = langs[j + 1];
//       langs[j + 1] = temp;
//     }
//   }
// }
// console.log(langs); // ¬†['c++', 'haskel', 'js', 'php', 'ruby']
// console.log(langs.sort()); // ¬†['c++', 'haskel', 'js', 'php', 'ruby']

// const numbers = [2, 15, 4, 57, 1, 63];
// let min = numbers[0];
// for (const number of numbers) {
//   if (number < min) {
//     min = number;
//   }
// }
// console.log(min); // 1


// let value = 1;
// let test = value;
// value += 10;
// console.log(value);
// console.log(test);

// const myArray = [];
// let i = 5;
//   while (i >= 0) {
//     myArray.push(i);
//     i -= 1;
//   }
// console.log(myArray); // [5, 4, 3, 2, 1, 0]

// const myArray = [];
// for(let i = 1; i <= 5; i +=1) {
// myArray.push(i);
// }
// console.log(myArray); // [1, 2, 3, 4, 5]

// const myArray = [];
// for(let i = 1; i <= 9; i += 2) {
// myArray.push(i);
// }
// console.log(myArray); // [1, 3, 5, 7, 9]

// const myArray = [];
// for(let i = 9; i > 0; i -= 2) {
// myArray.push(i);
// }
// console.log(myArray); // [9, 7, 5, 3, 1]

// const myArr = [2, 3, 4, 5, 6];
// let total = 0;
// for(let i = 0; i < myArr.length; i += 1) {
// console.log(total += myArr[i]); // 20
// }

// function multiplyAll(arr) {
//   let product = 1;
//   for(let i = 0; i < arr.length; i++) {
//     for(let j = 0; j < arr[i].length; j++) {
//       product *= arr[i][j];
//     }
//   }
//   return product;
// }
// console.log(multiplyAll([[1, 2], [3, 4], [5, 6, 7]])); // 5040

// const myArray = [];
// let i = 10;
// do {
// myArray.push(i);
//   i++;
// }
// while (i < 10);
// console.log(myArray); // [10]

// function checkSign(num) {
//   return num > 0 ? "positive" : (num < 0) ? "negative" : "zero";
// }
// console.log(checkSign(10));


// üåûüåûüåûüåûüåûüåû–ú–æ–¥—É–ª—å 2.üåûüåûüåûüåûüåû  
// üåª–ú–æ–¥—É–ª—å 2 (–£—Ä–æ–∫ 1). –ú–∞—Å–∏–≤–∏.

  // const array = [1, 'Hello', null, true, [1, 2, 3]];
  // for(let i = 0; i < array.length; i += 1) {
  //   if(Array.isArray(array[i])) {
  //     for(let j = 0; j < array[i].length; j +=1) {
  //       console.log(array[i][j])
  //     }
  //     continue;
  //   }
  //   console.log(array[i]);
  // }

  // const array = [1, 'Hello', null, true, [1, 2, 3]];
  // for(let i = 0; i < array.length; i += 1) {
  //   const item = array[i];
  //   if(Array.isArray(item)) {
  //     for(let j = 0; j < item.length; j +=1) {
  //       console.log(item[j])
  //     }
  //     continue;
  //   }
  //   console.log(array[i]);
  // }

  // const array = [1, 'Hello', null, true, [1, 2, 3]];
  // for(const item of array) {
  //   console.log(item);
  // }

  // const values = '8 11';
  // const array = values.split(' ');
  // const first = Number(array[0]);
  // const last = Number(array[array.length-1]);
  // const result = first * last;
  // console.log(result);

  // let names = 'Poli, Doli, Mango';
  // let number = '0501112233, 0661472536, 0951475623';
  // names = names.split(',');
  // number = number.split(',');
  // for(let i = 0; i < names.length, i < number.length; i += 1) {
  //   console.log(`${names[i]} - ${number[i]}`);
  // };
 
  // const string = 'Welcome to the future';
  // const result = string.split(' ').slice(1, -1).join(' ');
  // console.log(result);

  // const langs = ['cb', 'as', 'dfg', 'op'];
  // for(let i = 0; i < langs.length; i +=1) {
  //   if(langs[0] > langs[i]) {
  //     const result = langs.splice(i,1)[0];
  //     langs.unshift(result);
  //   }
  // };
  // console.log(langs);

//   const numbers = [2, 5, 94, 6, 1, 57];
//   let min = numbers[0];
//   for (const number of numbers) {
//     if(number < min) {
//       min = number
//     }
//   };
//   console.log(min);

// üåª–ú–æ–¥—É–ª—å 2 (–£—Ä–æ–∫ 2). –§—É–Ω–∫—Ü—ñ—ó.

// –§—É–Ω–∫—Ü—ñ—ó
// let a = 10;
// function foo() {
//   a = 45;
// }
// foo();
// console.log(a); // 45

// let a = 10;
// function foo(a) {
//   a = 45;
// }
// foo(a); // or foo();
// console.log(a); // 10

// const test = [1, 2, 3];
// function foo(arr) {
//   // let arr = test; 
//   arr.splice(0, 1); 
// }
// foo(test);
// console.log(test); // [2, 3]

// function foo() {
//   let max;
//   for (const num of arguments) {
//     if (typeof num === "number") {
//       max = num;
//       break;
//     }
//   }
//   for (const num of arguments) {
//     if (typeof num === 'number') {
//         if (num > max) {
//           max = num;
//         } 
//     } else {
//       max = foo(...num)
//     }
//   }
//   return max;
// }
// console.log(foo(1, 2, 3, [1, 9, [200]])); // 200

// function formatTime(minutes) {
//   const hours = Math.floor(minutes / 60);
//   minutes = Math.floor(minutes % 60);
//   return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`; 
// }
// console.log(formatTime(70)); // "01:10"
// console.log(formatTime(450)); // "07:30"
// console.log(formatTime(1441)); // "24:01"

// function getExtremeElements(array) {
//   return [array[0], array[array.length - 1]];
//   // const first = array.slice(0, 1);
//   // const second = array.slice(array.length - 1, array.length);
//   // return first.concat(second); 
// }
// console.log(getExtremeElements([1, 2, 3, 4, 5])); // [1, 5]
// console.log(getExtremeElements(["Earth", "Mars", "Venus"])); // ["Earth", "Venus"]

// function splitMessage(message, delimiter) {
//   let words;
//   words = message.split(delimiter);
//   return words;
// }
// console.log(splitMessage("Mango hurries to the train", " ")); //  ["Mango", "hurries", "to", "the", "train"]
// console.log(splitMessage("Mango", "")); // ["M", "a", "n", "g", "o"]

// function calculateEngravingPrice(message, pricePerWord) {
//   const arr = message.split(' ');
//   return arr.length * pricePerWord;
// }
// console.log(calculateEngravingPrice("JavaScript is in my blood", 10)) // 50
// console.log(calculateEngravingPrice("JavaScript is in my blood", 20)) // 100

// function makeStringFromArray(array, delimiter) {
//   let string;
//   string = array.join(delimiter)
//   return string;
// }
// console.log(makeStringFromArray(["Mango", "hurries", "to", "the", "train"], " ")) // "Mango hurries to the train"

// function slugify(title) {
//   return title.toLowerCase().split(' ').join('-');
// }
// console.log(slugify("Arrays for begginers")) // "arrays-for-begginers"

// function makeArray(firstArray, secondArray, maxLength) {
//   const jointArray = firstArray.concat(secondArray);
//   return jointArray.slice(0, maxLength);
// }
// console.log(makeArray(["Mango", "Poly"], ["Ajax", "Chelsea"], 3)) // ["Mango", "Poly", "Ajax"]

// function calculateTotal(number) {
//   let sum = 0;
//   for (let i = 1; i <= number; i++) {
//     sum = sum + i;
//   }
//   return sum;
// }
// console.log(calculateTotal(3)); // 6

// function calculateTotalPrice(order) {
//   let total = 0;
//   for (let i = 0; i < order.length; i += 1) {
//     total = total + order[i];
//   }
//   return total;
// }
// console.log(calculateTotalPrice([12, 85, 37, 4])); // 138

// function findLongestWord(string) {
//   let longestWord = '';
//   const arr = string.split(' ');
//   for (let i = 0; i < arr.length; i += 1) {
//     if (arr[i].length > longestWord.length) {
//       longestWord = arr[i];
//    }
//   }
//   return longestWord;
// }
// console.log(findLongestWord("Google do a roll")); // Google
// console.log(findLongestWord('May the force be with you')); // force

// function createArrayOfNumbers(min, max) {
//   const numbers = [];
//   for (let i = min; i <= max; i += 1) {
//     numbers.push(i);
//   }
//   return numbers;
// }
// console.log(createArrayOfNumbers(1, 3)); // [1, 2, 3]

// function filterArray(numbers, value) {
//   const newArray = [];
//   for (let i = 0; i < numbers.length; i++) {
//     if (numbers[i] > value) {
//       newArray.push(numbers[i]);
//     }
//   }
//   return newArray;
// }
// console.log(filterArray([1, 2, 3, 4, 5], 3)); // [4, 5]
// console.log(filterArray([12, 24, 8, 41, 76], 38)); // [41, 76]

// function getCommonElements(array1, array2) {
//   const newArray = [];
//   for (let i = 0; i < array1.length; i += 1) {
//     if (array2.includes(array1[i])) {
//       newArray.push(array1[i])
//     }
//   } 
//   return newArray;
// }
// console.log(getCommonElements([1, 2, 3], [2, 4])); // [2]

// function getEvenNumbers(start, end) {
//   const arr = [];
//   for (let i = start; i <= end; i += 1) {
//     if (i % 2 === 0) {
//       arr.push(i);
//     }
//   }
//   return arr;
// }
// console.log(getEvenNumbers(2, 5)); // [2, 4]

// function findNumber(start, end, divisor) {
//   let number;
//   for (let i = start; i < end; i += 1) {
//     if (i % divisor === 0) {
//       return number = i;
//     }
//   }
//   return number;
// }
// console.log(findNumber(2, 6, 5)); // 5

// function includes(array, value) {
//   for (let i = 0; i < array.length; i += 1) {
//     if (array[i] === value) {
//       return true;
//     }
//   }
//   return false;
// }
// console.log(includes([1, 2, 3, 4, 5], 3)); // true


// let sum = 0;
// function addSum(num) {
//   sum = sum + num;
// }
// console.log(addSum(3)); // undefined  –±–æ –Ω–µ –º–∞—î return

// function orderMyLogic(val) {
//   if (val < 5) {
//     return "Less than 5";
//   } else if (val < 10) {
//     return "Less than 10";
//   } else {
//     return "Greater than or equal to 10";
//   }
// }
// console.log(orderMyLogic(4));

// function add() {
//     let sum = 0;
//     console.log(arguments); //–≤–∏–≤–µ–¥–µ –≤—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏, —Å–∫—ñ–ª—å–∫–∏ –± —ó—Ö –Ω–µ –±—É–ª–æ
//     for (let i = 0; i < arguments.length; i +=1) {
//         sum += arguments[i];
//     };
//     console.log(sum);
// };
// add(1, 2, 3, 4);
// add(1, 2, 3, 4, 5);
// add(1, 2, 3, 4, 5, 6);

// function add() {
//     let sum = 0;
//     const arr = [...arguments];
//     console.log(arguments); //–≤–∏–≤–µ–¥–µ –≤—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏, —Å–∫—ñ–ª—å–∫–∏ –± —ó—Ö –Ω–µ –±—É–ª–æ
//     console.log(arr);
//     for (const value of arguments) {
//         sum += value;
//     };
//     console.log(sum);
// };
// add(1, 2, 3, 4);
// add(1, 2, 3, 4, 5);
// add(1, 2, 3, 4, 5, 6);

// function calsBMI(weight, height) {
//     weight = Number(weight.replace(',', '.'));
//     height = Number(height.replace(',', '.'));

//     // return Number((weight/Math.pow(height, 2)).toFixed(1));
//     return Number((weight/height**2).toFixed(1));
// }
// const bmi = calsBMI('88,3', '1.75');
// console.log(bmi);

// function min(a, b) {
//   if(a > b) {
//     return b;
//   }
//   return a;
// };
// console.log(min(5, 10));
// console.log(min(-13, 12));
// console.log(min(1, 1));

// function min(a, b) {
//   return a > b ? b : a;
// };
// console.log(min(5, 10));
// console.log(min(-13, 12));
// console.log(min(1, 1));

// function getRectArea(dimensions) {
//   dimensions = dimensions.split(' '); //–ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–ª–∏ —Ä—è–¥–æ–∫ –Ω–∞ –º–∞—Å–∏–≤
//   const first = Number(dimensions[0]);
//   const second = Number(dimensions[1]);
//   return first * second;
// };
// console.log(getRectArea('8 11'));
// console.log(getRectArea('13 19'));
// console.log(getRectArea('9 23'));

// function logItems(items) {
//   for(let i = 0, num = 1; i < items.length; i += 1, num += 1) {
//     console.log(`${num} - ${items[i]}`); 
//   }
// };
// logItems(['Mango', 'Poli', 'Ajax', 'Doli']);
// logItems(['üçÖ', 'üçé', 'üçì', 'üçê', 'üçå', 'üçç']);

// function printContactInfo(names, phone) {
//   names = names.split(',');
//   phone = phone.split(',');
//   for(let i = 0; i < names.length, i < phone.length; i += 1) {
//     console.log(`${names[i]} - ${phone[i]}`);
//   }
// };
// printContactInfo('Solomon, Jacob, Artem', '0501471213, 0661234556, 0951593526');

// function findLargesNumber() {
//   const arr = [...arguments];
//   let max = arr[0];
//   for(const num of arr) {
//     if(num > max) {
//       max = num;
//     }
//   }
//   return max;
// };
// console.log(findLargesNumber(2, 17, 62, 1, 23, 57)); //62
// console.log(findLargesNumber(49, 4, 7, 83, 12)); //83

//–†—ñ–≤–µ–Ω—å Junior —Å –∑—ñ—Ä–æ—á–∫–æ–π üåü
// function findLargesNumber() {
//   let max;
//   for(const num of arguments) {
//     if(typeof num === 'number') {
//       max = num;
//       break;
//     }
//   }
//   for(const num of arguments) {
//     if(typeof num === 'number') {
//       if(num > max) {
//         max = num;
//       }
//     } else {
//       max = findLargesNumber(...num);
//     }
//   }  
//    return max; 
// };
// console.log(findLargesNumber(2, [123, 15], 17, 62, 1, 23, 57)); //123

// function calAverage() {
//   let total = 0;
//   for(const num of arguments) {
//     total += num;
//   }
//   return total / arguments.length;
// };
// console.log(calAverage(1, 2, 3, 4, 5));

// function formatTime(minutes) {
//   const hours = Math.floor(minutes/60);
//   minutes = minutes % 60;
//   return `${hours.toString().padStart(2, '0')} : ${minutes.toString().padStart(2, '0')}`;
// };
// console.log(formatTime(70)); // "01:10"
// console.log(formatTime(450)); // "07:30"
// console.log(formatTime(1441)); // "24:01"

// function foo(array) {
//   for(let i = 0; i < array.length; i++) {
//     array[i] *=2;
//   }
// }
// const numbers = [1, 2, 3, 4, 5];
// console.log(numbers); // [1, 2, 3, 4, 5]
// console.log(foo(numbers)); // undefined, –±–æ –Ω–µ–º–∞—î return
// console.log(numbers); // [2, 4, 6, 8, 10]

// let courses = ['HTML', 'JS', 'React', 'Node'];
// function updateCourse(oldCourse, newCourse) {
//   const idx = courses.indexOf(oldCourse);
//   if(!!~idx) {
//     courses.splice(idx, 1, newCourse);
//     return courses; 
//   }
//   return '–¢–∞–∫–∏–π –∫—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ';
// };
// console.log(updateCourse('React', 'React Native'));

// console.log(!!~-1); // !!~ –ø—Ä–∞—Ü—é—î –ø–æ —Ñ–æ—Ä–º—É–ª—ñ -(x+1)

// // —Ä–µ–∫—É—Ä—Å—ñ—è
// function sum(arr, n) {
//   if(n <= 0) {
//     return 0;
//   } else {
//     return sum(arr, n - 1) + arr[n-1]
//   }
// }
// console.log(sum([1, 2, 3], 2)); // 3 - —Å—É–º–∞ –¥–≤–æ—Ö –ø–µ—Ä—à–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤–∞

// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤—ñ–¥–ª—ñ–∫—É
// function countdown(n){
//   if (n < 1) {
//    return [];
//  } else {
//    const countArray = countdown(n - 1);
//    countArray.unshift(n);
//    return countArray;
//  }
// }
// console.log(countdown(5)); // [5, 4, 3, 2, 1]

// function rangeOfNumbers(startNum, endNum) {
//   if (startNum > endNum) {
//   return [];
// } else {
//   const countArray = rangeOfNumbers(startNum, endNum - 1);
//   countArray.push(endNum);
//   return countArray;
// }
// }
// console.log(rangeOfNumbers(3, 7)); // [3, 4, 5, 6, 7]


// üåûüåûüåûüåûüåû–ú–æ–¥—É–ª—å 3.üåûüåûüåûüåûüåû  
// üåª–ú–æ–¥—É–ª—å 3 (–£—Ä–æ–∫ 1). –û–±'—î–∫—Ç–∏.

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze

// 

// const user = {
//   score: falseconst user = {
//   score: false
// }
// if('score' in user) {
//   console.log('yes')
// } else {
//   console.log('no')
// }
// }
// if(user.hasOwnProperty('score')) {
//   console.log('yes')
// } else {
//   console.log('no')
// }

// const user = {
//   name: 'Mango',
//   age: 30,
//   hobby: 'html',
//   premium: true,
// };
// user.mood = 'happy';
// user.hobby = 'skyjumping';
// user['premium'] = false;
// // const key = 'premium';
// // user[key] = false;
// console.log(user);
// const keys = Object.keys(user);
// for(const key of keys) {
//   console.log(user[key]);
// }
// console.log(keys);

// const salaries = {
//   John: 100,
//   Ann: 160,
//   Pete: 130,
// }
//for...in - 1 —Å–ø–æ—Å–æ–±
// let sum = 0;
// for(const key in salaries) {
//   sum += salaries[key]
// }
// console.log(sum);
// Object.values and for...of - 2 —Å–ø–æ—Å–æ–±
// let sum = 0;
// const values = Object.values(salaries);
// for(const value of values) {
//   sum += value ;
// }
// console.log(sum);

// const apartment = {
//   descr: "Spacious apartment in the city center",
//   rating: 4,
//   price: 2153,
// };
// const keys = [];
// const values = [];
// for (const key in apartment) {
//   if (apartment.hasOwnProperty(key)) { // –ø—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É, —Ç—É—Ç –≤–æ–Ω–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ
//     keys.push(key);
//     values.push(apartment[key]);
//   }
// }
// console.log(keys); // ["descr", "rating", "price"]
// console.log(values); // ["Spacious apartment in the city center", 4, 2153]

// function countProps(object) {
//   // let propCount = 0;
//   // for (const key in object) {
//   //   if (object.hasOwnProperty(key)) {
//   //     propCount += 1;
//   //   }
//   // }
//   // return propCount;
//   // ---------------------------------------------------
//   return Object.keys(object).length;
// }
// console.log(countProps({ name: "Mango", age: 2 })); // 2

// function countProps(object) {
//  let propCount = 0;
//   for (const key of Object.keys(object)) {
//     propCount += 1;
//   }
//   return propCount;
// }
// console.log(countProps({ name: "Mango", age: 2 })); // 2

// function countTotalSalary(salaries) {
//   let totalSalary = 0;
//   for (const value of Object.values(salaries)) {
//     totalSalary += value;
//   }
//   return totalSalary;
// }
// console.log(countTotalSalary({ mango: 100, poly: 150, alfred: 80 })); // 330

// const colors = [
//   { hex: "#f44336", rgb: "244,67,54" },
//   { hex: "#2196f3", rgb: "33,150,243" },
//   { hex: "#4caf50", rgb: "76,175,80" },
//   { hex: "#ffeb3b", rgb: "255,235,59" },
// ];
// const hexColors = [];
// const rgbColors = [];
// for (const color of colors) {
//   hexColors.push(color.hex);
//   rgbColors.push(color.rgb)
// }
// console.log(hexColors); // ["#f44336", "#2196f3", "#4caf50", "#ffeb3b"] 
// console.log(rgbColors); // ["244,67,54", "33,150,243", "76,175,80", "255,235,59"]

// const products = [
//   { name: "Radar", price: 1300, quantity: 4 },
//   { name: "Scanner", price: 2700, quantity: 3 },
//   { name: "Droid", price: 400, quantity: 7 },
//   { name: "Grip", price: 1200, quantity: 9 },
// ];
// function getProductPrice(productName) {
//   for (const product of products) {
//     if (productName === product.name) {
//       return product.price
//     }
//   }
//   return null;
// }
// console.log(getProductPrice("Radar")); // 1300
// console.log(getProductPrice("Grip")); // 1200
// console.log(getProductPrice("Scanner")); // 2700
// console.log(getProductPrice("Droid")); // 400
// console.log(getProductPrice("Engine")); // null
//------------------------------------------------
// function getAllPropValues(propName) {
//   const allValue = [];
//   for (const value of products) {
//     if (value.hasOwnProperty(propName)) {
//       for (const key in value) {
//         if (key === propName) {
//            allValue.push(value[propName]);
//         }
//       }
//     }
//   }
//   return allValue;
// }
// console.log(getAllPropValues("name")); // ["Radar", "Scanner", "Droid", "Grip"]
// console.log(getAllPropValues("quantity")); // [4, 3, 7, 9]
// console.log(getAllPropValues("price")); // [1300, 2700, 400, 1200]
// console.log(getAllPropValues("category")); // []
//----------------------------------------------------------------------------------
// function calculateTotalPrice(productName) {
//   // let total = 0;
//   // for (const value of products) {
//   //   for (const key in value) {
//   //     if (value.name === productName) {
//   //     return total = value.price * value.quantity 
//   //   }
//   //   }
//   // }
//   // return total;
// //------------------------------------------------------------------------------------
//   // let prices = 0;
//   // for (let product of products) {
//   //   const key = Object.keys(product);
//   //   if (productName === product.name) {
//   //     prices = product.price * product.quantity;
//   //   }
//   // }
//   // return prices;
// }
// console.log(calculateTotalPrice("Blaster")); // 0
// console.log(calculateTotalPrice("Radar")); // 5200

// const highTemperatures = {
//   yesterday: 28,
//   today: 26,
//   tomorrow: 33,
// };
// const { yesterday, today, tomorrow } = highTemperatures; // –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è –æ–±'—î–∫—Ç–∞
// console.log(today); // 26
// const {
//   yesterday,
//   icon = "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg", 
//   today,
//   tomorrow } = highTemperatures; // –¥–æ–¥–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è

// const apartment = {
//   descr: "Spacious apartment in the city center",
//   rating: 4,
//   price: 2153,
// };
// const values = [];
// const keys = Object.keys(apartment);
// for (const key of keys) {
//   values.push(apartment[key]);  
// }
// console.log(keys); // ["descr", "rating", "price"]
// console.log(values); // ["Spacious apartment in the city center", 4, 2153]

// const colors = [
//   { hex: "#f44336", rgb: "244,67,54" },
//   { hex: "#2196f3", rgb: "33,150,243" },
//   { hex: "#4caf50", rgb: "76,175,80" },
//   { hex: "#ffeb3b", rgb: "255,235,59" },
// ];
// const hexColors = [];
// const rgbColors = [];
// for (const {hex, rgb} of colors) {
//   hexColors.push(hex);
//   rgbColors.push(rgb);
// }
// console.log(hexColors); // ["#f44336", "#2196f3", "#4caf50", "#ffeb3b"]
// console.log(rgbColors); // ["244,67,54", "33,150,243", "76,175,80", "255,235,59"]

// function calculateMeanTemperature(forecast) {
//   // const todayLow = forecast.today.low;
//   // const todayHigh = forecast.today.high;
//   // const tomorrowLow = forecast.tomorrow.low;
//   // const tomorrowHigh = forecast.tomorrow.high;
//   //--------------------------------------------------------------------------------------------------------
//   const {
//     today: {
//       low: todayLow,
//       high: todayHigh
//     },
//     tomorrow: {
//       low: tomorrowLow,
//       high: tomorrowHigh,
//     }
//   } = forecast;
//   return (todayLow + todayHigh + tomorrowLow + tomorrowHigh) / 4;
// }
// console.log(calculateMeanTemperature({ today: {low: 28, high: 32}, tomorrow: {low: 25, high: 29} })); // 28.5

// const bookShelf = {
//   books: ["The last kingdom", "Haze", "The guardian of dreams"],
//   updateBook(oldName, newName) {
//     const index = this.books.indexOf(oldName);
//     return this.books.splice(index, 1, newName);
//   },
// };
// console.log(bookShelf.updateBook("Haze", "Dungeon chronicles"));
// console.log(bookShelf.books); // ["The last kingdom", "Dungeon chronicles", "The guardian of dreams"]

// const atTheOldToad = {
//   potions: [
//     { name: "Speed potion", price: 460 },
//     { name: "Dragon breath", price: 780 },
//     { name: "Stone skin", price: 520 },
//   ],
//   // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ –∑—ñ–ª–ª—è
//   getPotions() {
//     return this.potions;
//   },
//   // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑—ñ–ª–ª—è
//   addPotion(newPotion) {
//     for (const potion of this.potions) {
//       if (potion.name === newPotion.name) {
//         return `Error! Potion ${newPotion.name} is already in your inventory!`;
//       }
//     }
//     this.potions.push(newPotion);
//   },
//    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑—ñ–ª–ª—è
//   removePotion(potionName) {
//     for (const potion of this.potions) {
//       if (potion.name === potionName) {
//         const potionIndex = this.potions.indexOf(potion);
//         this.potions.splice(potionIndex, 1);
//         return;
//       }
//     }
//     return `Potion ${potionName} is not in inventory!`;
//   },
//    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –∑—ñ–ª–ª—è
//   updatePotionName(oldName, newName) {
//     for (const potion of this.potions) {
//       if (potion.name === oldName) {
//         potion.name = newName
//         return;
//       }
//     }
//     return `Potion ${oldName} is not in inventory!`;
//   },
// };
// // const atTheOldToad = {
// //   potions: [
// //     { name: "Speed potion", price: 460 },
// //     { name: "Dragon breath", price: 780 },
// //     { name: "Stone skin", price: 520 },
// //   ],
// //   // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ –∑—ñ–ª–ª—è
// //   getPotions() {
// //     return this.potions;
// //   },
// //   // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑—ñ–ª–ª—è
// //   addPotion(newPotion) {
// //     for (const potion of this.potions) {
// //       if (potion.name === newPotion.name) {
// //         return `Error! Potion ${newPotion.name} is already in your inventory!`;
// //       }
// //     }
// //     this.potions.push(newPotion);
// //   },
// //   // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑—ñ–ª–ª—è
// //   removePotion(potionName) {
// //     const potionIndex = this.potions.findIndex(potion => potion.name === potionName);
// //     if (potionIndex === -1) {
// //       return `Potion ${potionName} is not in inventory!`;
// //     }
// //     this.potions.splice(potionIndex, 1);
// //   },
// //   // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –∑—ñ–ª–ª—è
// //   updatePotionName(oldName, newName) {
// //     const potion = this.potions.find(potion => potion.name === oldName);
// //     if (!potion) {
// //       return `Potion ${oldName} is not in inventory!`;
// //     }
// //     potion.name = newName;
// //   },
// // };
// console.log(atTheOldToad.getPotions());
// // [{ name: "Speed potion", price: 460 }, 
// //  { name: "Dragon breath", price: 780 }, 
// //  { name: "Stone skin", price: 520 }]
// atTheOldToad.addPotion({ name: "Invisibility", price: 620 });
// console.log(atTheOldToad.getPotions());
// // [{ name: "Speed potion", price: 460 }, 
// // { name: "Dragon breath", price: 780 }, 
// // { name: "Stone skin", price: 520 }, 
// // { name: "Invisibility", price: 620 }]
// console.log(atTheOldToad.addPotion({ name: "Speed potion", price: 460 }));
// // "Error! Potion Speed potion is already in your inventory!"
// atTheOldToad.removePotion("Dragon breath");
// console.log(atTheOldToad.getPotions());
// // [{ name: "Speed potion", price: 460 }, 
// // { name: "Stone skin", price: 520 }, 
// // { name: "Invisibility", price: 620 }]
// console.log(atTheOldToad.removePotion("Healing potion"));
// // "Potion Healing potion is not in inventory!"
// atTheOldToad.updatePotionName("Stone skin", "Earth shield");
// console.log(atTheOldToad.getPotions());
// // [{ name: "Speed potion", price: 460 }, 
// // { name: "Earth shield", price: 520 }, 
// // { name: "Invisibility", price: 620 }]
// console.log(atTheOldToad.updatePotionName("Dragon breath", "Fire breath"));
// // "Potion Dragon breath is not in inventory!"





// üåª–ú–æ–¥—É–ª—å 3 (–£—Ä–æ–∫ 2). –û–ø–µ—Ä–∞—Ü—ñ—ó rest —Ç–∞ spread.

// function makeTask(data) {
//   const { text } = data;
//   const dataNew = {
//     completed: false,
//     category: "General",
//     priority: "Normal",
//   }
//   const completed = false;
//   const category = "General";
//   const priority = "Normal";
//   return { ...dataNew, ...data };
// }
// console.log(makeTask({})); // { category: "General", priority: "Normal", completed: false }
// console.log(makeTask({ category: "Homemade", priority: "Low", text: "Take out the trash" })); // { category: "Homemade", priority: "Low", text: "Take out the trash", completed: false }

// function add(...args) {
//   let sum = 0; 
//   for (const arg of args) {
//     sum += arg;
//   }
//   return sum;
// }
// console.log(add(15, 27)); // 42
// console.log(add(12, 4, 11, 48)); // 75

// function addOverNum(...args) {
//   let total = 0;
//   for (let i = 0; i < args.length; i++) { 
//     if (args[i] > args[0]) {
//        total += args[i];
//     }
//   }
//   return total;
// }
// console.log(addOverNum(50, 15, 27)); // 0
// console.log(addOverNum(10, 12, 4, 11, 48, 10, 8)); // 71

// function findMatches(first, ...args) {
//   const matches = []; 
//   for (let i = 0; i < first.length; i++) {
//     if (args.includes(first[i])) {
//       matches.push(first[i]);
//     }
//   }
//   return matches;
// }
// console.log(findMatches([1, 2, 3, 4, 5], 1, 8, 2, 7)); // [1, 2]
// console.log(findMatches([4, 89, 17, 36, 2], 8, 17, 89, 27, 2)); // [17, 89, 2]












// const arr = [1, 2, 3];
// const [a, b, c] = arr; // –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è –º–∞—Å–∏–≤—É
// console.log(a); // 1
// console.log(b); // 2
// console.log(c); // 3
// -------------------------------------------------
// const [_, b, c] = arr; // –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è –º–∞—Å–∏–≤—É
// console.log(b); // 2
// console.log(c); // 3

// const user = {
//   name: 'Mango',
//   age: 11,
//   skills: {
//     html: true,
//     css: true,
//     js: false
//   }
// };
// const {name, skills} = user; // –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä—ñ–∑–∞—Ü—ñ—è –æ–±'—î–∫—Ç—É 
// console.log(skills); // { html: true, css: true, js: false}
// -------------------------------------------------------------
// const {name: userName, skills} = user; // –ø–µ—Ä–µ—ñ–º–µ–Ω—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞ –æ–±'—î–∫—Ç–∞
// console.log(userName); // Mango
// --------------------------------------------------------------------
// const {name, skills: {js}} = user;
// console.log(js); // false
// console.log(skills); // Uncaught ReferenceError: skills is not defined –ø–æ–º–∏–ª–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—ñ
// -----------------------------------------------------------------------------------------

// const users = [{
//   name: 'User1',
//   language: 'html'
// }, {
//   name: 'User2',
//   language: 'css'
// }, {
//   name: 'User3',
//   language: 'js'
// }];
// for(const {name, language} of users) {
//   console.log(name, language); // User1 html —ñ —Ç.–¥
// }; 
// ------------------------------------------------------------------------------------
// for(const {name, language = 'no'} of users) { // language = 'no' –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
//   console.log(name, language); // User1 html —ñ —Ç.–¥
// }; 

// const arr = [56, 22, 4, 25, 7];
// const min = Math.min(...arr); //...spread
// console.log(min); // 4
// ----------------------------------------------
// const arr1 = [...arr]; // —Ä–æ–±–∏–º–æ –∫–æ–ø—ñ—é –º–∞—Å–∏–≤–∞ arr
// console.log(arr1);
// ----------------------------------------------
// const [first, ...props] = arr; // ...rest
// console.log(first); // 56
// console.log(props); // [22, 4, 25, 7]
// for(i = 0; i < props.length; i += 1) {
//   props[i] *= first;
// };
// console.log(props); // [1232, 224, 1400, 392]
//--------------------------
// —Ü–µ –¥–æ–∫–∞ –¥–æ —Ñ—É–Ω–∫—Ü—É—ñ—ó foo()
/** 
 * 
 * @param {Number} first 
 * @param {Number} second 
 */
// function foo(first, second) {
//   console.log(first, second);
// };
// foo(...arr); // spread // 56 22

// –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä—ñ–∑–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ñ, —â–æ–± –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ for...of
// function getStockReport({companyName, stock: {repairBots, deferenceBots}}) {
//   const total = repairBots + deferenceBots;
//   return `${companyName} has ${total} items in stock`
// };
// console.log(getStockReport({
//   companyName: 'Cyber Systems', 
//   stock: {
//     repairBots: 150,
//     deferenceBots: 200
//   }
// }));

// function transformUserName({firstName, lastName, ...props}) {
//   return {
//     fulName: `${firstName} ${lastName}`,
//     ...props
//   }
// };
// console.log(transformUserName({
//   id: 1,
//   firstName: 'Jacob',
//   lastName: 'Dorn',
//   email: 'jd@gmail.com',
//   friendCount: 40
// }));

// const user = {
//   email: 'us@gmail.com',
//   age: 30
// };
// const {username = 'User'} = user; // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è –∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –Ω–µ –∑–º—ñ–Ω—é—î –≤–∏—Ö—ñ–¥–Ω–∏–π –æ–±'—î–∫—Ç, –≤–æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ —Å—Ç–≤–æ—Ä—é—î –ª–æ–∫–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º.
// console.log(username); // User
// console.log(user.username); // undefined

// const user = {
//   email: 'us@gmail.com',
//   age: 30,
//   location: {
//     lat: 10,
//     lon: 20
//   }
// };
// const {location: {lat, lon}} = user;
// console.log(lat, lon); // 10, 20

// function foo({username} = {}) {
//   console.log(username); // undefined
// };
// foo();

// const contacts = [
//   {
//     firstName: "Akira",
//     lastName: "Laine",
//     number: "0543236543",
//     likes: ["Pizza", "Coding", "Brownie Points"],
//   },
//   {
//     firstName: "Harry",
//     lastName: "Potter",
//     number: "0994372684",
//     likes: ["Hogwarts", "Magic", "Hagrid"],
//   },
//   {
//     firstName: "Sherlock",
//     lastName: "Holmes",
//     number: "0487345643",
//     likes: ["Intriguing Cases", "Violin"],
//   },
//   {
//     firstName: "Kristian",
//     lastName: "Vos",
//     number: "unknown",
//     likes: ["JavaScript", "Gaming", "Foxes"],
//   },
// ];
// function lookUpProfile(name, prop) {
//   for (let i = 0; i < contacts.length; i++) {
//     if (contacts[i].firstName === name) {
//       if (contacts[i].hasOwnProperty(prop)) {
//         return contacts[i][prop];
//       } else {
//         return "No such property";
//       }
//     }
//   }
//   return "No such contact";
// }
// console.log(lookUpProfile("Akira", "likes"));

// // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó parseInt –∑ —Ä–æ–∑—Ä—è–¥–æ–º
// function convertToInteger(str) { 
//   return parseInt(str, 2);  // parseInt(string, radix);
//   }
// console.log(convertToInteger("10011")); // 19


// üåûüåûüåûüåûüåû–ú–æ–¥—É–ª—å 4.üåûüåûüåûüåûüåû 
// üåª–ú–æ–¥—É–ª—å 4 (–£—Ä–æ–∫ 1). –ö–æ–ª–±–µ–∫–∏ —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// const arr = [2, 6, 8, 5, 4, 3];
// function each(arr, callback) {
//   let total = arr[0];
//   for(let i = 1; i < arr.length; i += 1) {
//     // console.log(callback);
//     total = callback(total, arr[i]);
//   }
//   return total;
// };
// function add(first, second) { // callback function
//   return first + second;
// };
// function sum(first, second) { // callback function
//   return first * second;
// };
// console.log(each(arr, add));
// console.log(each(arr, sum));

// const pizzaPalace = {
//   pizzas: ['Ultracheese', 'Smoked', 'Four meats'],
//   order(pizzaName, onSuccess, onError) {
//     const isExists = this.pizzas.includes(pizzaName);
//     if (isExists) {
//       return onSuccess(pizzaName);
//     }
//     return onError(`There is no pizza with a name ${pizzaName} in the assortment.`);
//   },
// };
// // Callback for onSuccess
// function makePizza(pizzaName) {
//   return `Your order is accepted. Cooking pizza ${pizzaName}.`;
// }
// // Callback for onError
// function onOrderError(error) {
//   return `Error! ${error}`;
// }
// console.log(pizzaPalace.order('Smoked', makePizza, onOrderError));
// console.log(pizzaPalace.order('Big Mike', makePizza, onOrderError));

// function calculateTotalPrice(orderedItems) {
//   let totalPrice = 0;
//   orderedItems.forEach(item => {
//     totalPrice += item;
//   });
//   return totalPrice;
// }
// console.log(calculateTotalPrice([12, 85, 37, 4])); // 138

// function getCommonElements(firstArray, secondArray) {
//   const commonElements = [];
//   firstArray.forEach(item => {
//     if (secondArray.includes(item)) {
//       commonElements.push(item);
//     }
//   })
//   return commonElements;
// }
// console.log(getCommonElements([1, 2, 3], [2, 4])); // [2]

// function changeEven(numbers, value) {
//   const newArray = [];
//   numbers.forEach(item => {
//     if (item % 2 === 0) {
//       newArray.push(item += value);
//     } else { newArray.push(item) }
//   }) 
//   return newArray;
// }
// console.log(changeEven([1, 2, 3, 4, 5], 10)); // [1, 12, 3, 14, 5]

// forEach
// const arr = [1, 2, 3, 4, 5];
// arr.forEach(element => console.log(element));
// ----------------------------------------------
// arr.forEach(function(element, i, arr){
//   arr[i] = element * 2;
// })
// console.log(arr); // [2, 4, 6, 8, 10]
// forEach –Ω–µ –º–æ–∂–Ω–∞ –ø—Ä–∏—Å–≤–æ—é–≤–∞—Ç–∏ –¥–æ –∑–º—ñ–Ω–Ω–æ—ó, –±–æ –∑–∞–≤–∂–¥–∏ –±—É–¥–µ undefined
// —Ç–∞–∫–æ–∂ –≤ –Ω—å–æ–º—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ break —ñ return

// const logItems = arr => arr.forEach((item, idx) => console.log(`${idx + 1} - ${item}`));
// logItems(['Poly', 'Mango', 'Ajax']);
// logItems(['üçÖ', 'üçã', 'üçê', 'üçë']);

// const calculateAverage = (...arr) => {
//   let total = 0;
//   arr.forEach(value => total += value);
//   return total / arr.length;
// };
// console.log(calculateAverage(1, 2, 3, 4)); // 2.5
// console.log(calculateAverage(14, 8, 2)); // 8
// console.log(calculateAverage(11, 23, 3, 7, 4)); //9.6

// function foo(callback) {
//   callback(10);
// }
// function logger(value) {
//   console.log(value);
// }
// foo(logger); // —Ç–∞–∫ –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—è —Ñ-—Ü—ñ—è logger —è–∫ —Ñ-—Ü—ñ—è-–∫–æ–ª–±–µ–∫

// –§—É–Ω–∫—Ü—ñ—è updateRecords –ø—Ä–∏–π–º–∞—î 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ—É–Ω–∫—Ü—ñ—ó:
// records ‚Äî –æ–±‚Äô—î–∫—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å –¥–µ–∫—ñ–ª—å–∫–∞ –æ–∫—Ä–µ–º–∏—Ö –∞–ª—å–±–æ–º—ñ–≤
// id ‚Äî —á–∏—Å–ª–æ, —â–æ –ø–æ–∑–Ω–∞—á–∞—î –ø–µ–≤–Ω–∏–π –∞–ª—å–±–æ–º –≤ –æ–±‚Äô—î–∫—Ç—ñ records
// prop ‚Äî —Ä—è–¥–æ–∫, —â–æ –ø–æ–∑–Ω–∞—á–∞—î –Ω–∞–∑–≤—É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∞–ª—å–±–æ–º—É, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏
// value ‚Äî —Ä—è–¥–æ–∫, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∞–ª—å–±–æ–º—É
// --------------------------------------------------------------------------------------------
// –ó–∞–≤–µ—Ä—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∏–∂—á–µ, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –æ–±‚Äô—î–∫—Ç, –ø–µ—Ä–µ–¥–∞–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó.
// –í–∞—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∂–¥–∏ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –≤–µ—Å—å –æ–±‚Äô—î–∫—Ç records.
// –Ø–∫—â–æ value —î –ø—É—Å—Ç–∏–º —Ä—è–¥–∫–æ–º, –≤–∏–¥–∞–ª—ñ—Ç—å –¥–∞–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å prop –∑ –∞–ª—å–±–æ–º—É.
// –Ø–∫—â–æ prop –Ω–µ —î tracks —Ç–∞ value –Ω–µ —î –ø—É—Å—Ç–∏–º —Ä—è–¥–∫–æ–º, –ø—Ä–∏–∑–Ω–∞—á—Ç–µ value –¥–æ prop –∞–ª—å–±–æ–º—É.
// –Ø–∫—â–æ prop —î tracks —Ç–∞ value –Ω–µ —î –ø—É—Å—Ç–∏–º —Ä—è–¥–∫–æ–º, –≤–∞–º —Ç—Ä–µ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –º–∞—Å–∏–≤ tracks –≤ –∞–ª—å–±–æ–º—ñ. 
// –Ø–∫—â–æ –∞–ª—å–±–æ–º –Ω–µ –º–∞—î –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ tracks, —Ç–æ –ø—Ä–∏–∑–Ω–∞—á—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤. 
// –ü–æ—Ç—ñ–º –¥–æ–¥–∞–π—Ç–µ value —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç —É –º–∞—Å–∏–≤—ñ tracks –∞–ª—å–±–æ–º—É.
// --------------------------------------------------------------------------------------------
// –ü—Ä–∏–º—ñ—Ç–∫–∞: –∫–æ–ø—ñ—è –æ–±‚Äô—î–∫—Ç—É recordCollection –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ç–µ—Å—Ç—ñ–≤. 
// –í–∏ –Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ –Ω–∞–ø—Ä—è–º—É –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ–±‚Äô—î–∫—Ç recordCollection.
// const recordCollection = {
//   2548: {
//     albumTitle: 'Slippery When Wet',
//     artist: 'Bon Jovi',
//     tracks: ['Let It Rock', 'You Give Love a Bad Name']
//   },
//   2468: {
//     albumTitle: '1999',
//     artist: 'Prince',
//     tracks: ['1999', 'Little Red Corvette']
//   },
//   1245: {
//     artist: 'Robert Palmer',
//     tracks: []
//   },
//   5439: {
//     albumTitle: 'ABBA Gold'
//   }
// };
// function updateRecords(records, id, prop, value) {
//   const updatedRecords = { ...records };
//   if (!updatedRecords[id]) {
//     return updatedRecords;
//   }
//   if (value === "") {
//     delete updatedRecords[id][prop];
//   } else if (prop !== "tracks") {
//     updatedRecords[id][prop] = value;
//   } else {
//     if (!updatedRecords[id].hasOwnProperty("tracks")) {
//       updatedRecords[id]["tracks"] = [];
//     }
//     updatedRecords[id]["tracks"].push(value);
//   }
//   return records;
// };
// console.log(updateRecords(recordCollection, 5439, 'artist', 'ABBA'));

// const myConcat = (arr1, arr2) => arr1.concat(arr2);
// console.log(myConcat([1, 2], [3, 4, 5])); // [1, 2, 3, 4, 5]

// const increment = (number, value = 1) => number + value;
// console.log(increment(4, 5)); // 9
// console.log(increment(4)); // 5

// üåª–ú–æ–¥—É–ª—å 4 (–£—Ä–æ–∫ 2). –ü–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—É

// üî∑map
// const arr = [1, 2, 3, 4, 5];
// const result = arr.map((item) => item * 2); // .map((item, idx, arr) => {})
// console.log(result); // [ 2, 4, 6, 8, 10]
// console.log(arr); // [1, 2, 3, 4, 5]
// -------------------------------------------------------------------------
// const result = arr.map(item => {
//   if(!(item%2)) {
//     return item * 3
//   }
//   return item
// });
// console.log(result); // [1, 6, 3, 12, 5]
// --------------------------------------------------------------------------
// const result = arr.map(item => !(item%2) ? item * 3 : item);
// console.log(result); // [1, 6, 3, 12, 5]

// const planets = ["Earth", "Mars", "Venus", "Jupiter"];
// const planetsLengths = planets.map(item => item.length);
// console.log(planetsLengths); // [5, 4, 5, 7]

// üî∑flatMap - —â–æ–± —Ä–æ–∑–≥–ª–∞–¥–∏—Ç–∏ –º–∞—Å–∏–≤
// const arr = [{
//   name: 'User1', 
//   skills: ['html', 'css']
// }, {
//   name: 'User1', 
//   skills: ['js', 'react']
// }, {
//   name: 'User1', 
//   skills: ['node.js', 'express']
// }];
// const resultMap = arr.map(item => item.skills.map(skill => skill));
// console.log(resultMap); // [['html', 'css'], ['js', 'react'], ['node.js', 'express']] 
// const result = arr.flatMap(item => item.skills);
// console.log(result); // ['html', 'css', 'js', 'react', 'node.js', 'express']

// üî∑find - –¥–æ–∑–≤–æ–ª—è—î –∑–Ω–∞–π—Ç–∏ –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å–∏–≤—ñ
// const arr = [1, 2, 3, 4, 5];
// const result = arr.find(item => item > 3);
// console.log(result); // 4
// --------------------------------------------------------
// const arr = [{
//   name: 'User1', 
//   skills: ['html', 'css']
//   }, {
//   name: 'User2', 
//   skills: ['js', 'react']
//   }, {
//   name: 'User3', 
//   skills: ['node.js', 'express']
// }];
// const result = arr.find(item => item.skills.includes('js')).name;
// console.log(result); // User2

// üî∑findIndex
// const arr = [{
//   name: 'User1', 
//   skills: ['html', 'css']
//   }, {
//   name: 'User2', 
//   skills: ['js', 'react']
//   }, {
//   name: 'User3', 
//   skills: ['node.js', 'express']
// }];
// const result = arr.findIndex(item => item.skills.includes('js'));
// console.log(result); // 1

// üî∑filter - –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å –≤–∏–º–æ–≥–∞–º
// const arr = [1, 2, 3, 4, 5];
// const result = arr.filter(item => !(item%2)); // –ø–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –ø–∞—Ä–Ω—ñ
// console.log(result); // [2, 4] 

// const books = [
//   {
//     title: "The Last Kingdom",
//     author: "Bernard Cornwell",
//     genres: ["adventure", "history"],
//   },
//   {
//     title: "Beside Still Waters",
//     author: "Robert Sheckley",
//     genres: ["fiction", "mysticism"],
//   },
//   {
//     title: "Redder Than Blood",
//     author: "Tanith Lee",
//     genres: ["horror", "mysticism", "adventure"],
//   },
// ];
// const allGenres = books.flatMap(book => book.genres);
// const uniqueGenres = allGenres.filter((item, index, array) => array.indexOf(item) === index);
// console.log(allGenres);// ['adventure', 'history', 'fiction', 'mysticism', 'horror', 'mysticism', 'adventure']
// console.log(uniqueGenres);// ['adventure', 'history', 'fiction', 'mysticism', 'horror']

// const users = [
//   {
//     name: "Moore Hensley",
//     email: "moorehensley@indexia.com",
//     eyeColor: "blue",
//     friends: ["Sharron Pace"],
//     isActive: false,
//     balance: 2811,
//     gender: "male",
//     age: 37
//   },
//   {
//     name: "Sharlene Bush",
//     email: "sharlenebush@tubesys.com",
//     eyeColor: "blue",
//     friends: ["Briana Decker", "Sharron Pace"],
//     isActive: true,
//     balance: 3821,
//     gender: "female",
//     age: 34
//   },
//   {
//     name: "Ross Vazquez",
//     email: "rossvazquez@xinware.com",
//     eyeColor: "green",
//     friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
//     isActive: false,
//     balance: 3793,
//     gender: "male",
//     age: 24
//   },
//   {
//     name: "Elma Head",
//     email: "elmahead@omatom.com",
//     eyeColor: "green",
//     friends: ["Goldie Gentry", "Aisha Tran"],
//     isActive: true,
//     balance: 2278,
//     gender: "female",
//     age: 21
//   },
//   {
//     name: "Carey Barr",
//     email: "careybarr@nurali.com",
//     eyeColor: "blue",
//     friends: ["Jordan Sampson", "Eddie Strong"],
//     isActive: true,
//     balance: 3951,
//     gender: "male",
//     age: 27
//   },
//   {
//     name: "Blackburn Dotson",
//     email: "blackburndotson@furnigeer.com",
//     eyeColor: "brown",
//     friends: ["Jacklyn Lucas", "Linda Chapman"],
//     isActive: false,
//     balance: 1498,
//     gender: "male",
//     age: 38
//   },
//   {
//     name: "Sheree Anthony",
//     email: "shereeanthony@kog.com",
//     eyeColor: "brown",
//     friends: ["Goldie Gentry", "Briana Decker"],
//     isActive: true,
//     balance: 2764,
//     gender: "female",
//     age: 39
//   }
// ]
// const getUsersWithFriend = (users, friendName) => {
//   return users.filter(user => user.friends.includes(friendName));
// };
// console.log(getUsersWithFriend(users, 'Goldie Gentry'));

// üî∑every - —á–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —É–º–æ–≤—ñ
// const arr = [1, 2, 3, 4, 5];
// const result = arr.every(item => !(item%2)); 
// console.log(result); // false

// üî∑some - —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∑–∞–¥–æ–≤—ñ–ª—å–Ω—è—î —É–º–æ–≤—ñ
// const arr = [1, 2, 3, 4, 5];
// const result = arr.some(item => !(item%2)); 
// console.log(result); // true

// üî∑sort 
// const arr = [21, 2, 35, 4, 15];
// const result = arr.sort((a, b) => a - b); 
// console.log(result); // [2, 4, 15, 21, 35]
// ---------------------------------------
// const result = arr.sort((a, b) => b - a); 
// console.log(result); // [35, 21, 15, 4, 2]
// console.log(arr); // [35, 21, 15, 4, 2] - –º—É—Ç—É—î –ø–æ—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤!!!
// ------------------------------------------------------------------
// const result = [...arr].sort((a, b) => b - a); 
// console.log(result); // [35, 21, 15, 4, 2]
// console.log(arr); // [21, 2, 35, 4, 15] - –Ω–µ –º—É—Ç—É—î –ø–æ—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤!!!
// ---------------------------------------------------------------------
// const str = ['s', 'b', 'A', 'a', 'f'];
// const result = str.sort(); // —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —é–Ω—ñ–∫–æ–¥—É
// console.log(result); // ['A', 'a', 'b', 'f', 's']
// const result = str.sort((a, b) => a.localeCompare(b));
// console.log(result); // ['a', 'A', 'b', 'f', 's']

// üî∑reduce
// const arr = [21, 2, 35, 4, 15];
// const result = arr.reduce((acc, item) => {
//   console.log('acc', acc);
//   console.log('item', item);
//   acc.push(item * 2);
//   return acc
// }, []);
// console.log(result); // [42, 4, 70, 8, 30]

// const cars = [
//   {make: 'Honda', model: 'CR-V', type: 'suv', amount: 14, price: 24045, onSale: true},
//   {make: 'Honda', model: 'Accord', type: 'sedan', amount: 2, price: 22455, onSale: true},
//   {make: 'Mazda', model: 'Mazda 6', type: 'sedan', amount: 8, price: 24195, onSale: false},
//   {make: 'Mazda', model: 'CX-9', type: 'suv', amount: 7, price: 31520, onSale: true},
//   {make: 'Ford', model: 'F-150', type: 'truck', amount: 11, price: 27110, onSale: true},
//   {make: 'Ford', model: 'Fusion', type: 'sedan', amount: 13, price: 22120, onSale: true}
// ];
// const getModels = cars.map(item => item.model);
// console.log(getModels); // ['CR-V', 'Accord', 'Mazda 6', 'CX-9', 'F-150', 'Fusion']
// --------------------------------------------------------------------------------------
// const makeCarWithDiscount = (cars, discount) => {
//   return cars.map(item => ({
//     ...item, 
//     price: item.price * (1 - discount)})
//     )
// };
// console.log(makeCarWithDiscount(cars, 0.2)); // –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑—ñ –∑–º—ñ–Ω–µ–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏
// ---------------------------------------------------------------------------------------
// const filterByPrice = (cars, threshold) => {
//   return cars.filter(({price}) => price < threshold);
// };
// console.log(filterByPrice(cars, 30000)); // –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑ price < 30000
// ---------------------------------------------------------------------------------------
// const carOnSale = (cars) => cars.filter(({onSale}) => onSale);
// console.log(carOnSale(cars));
// ---------------------------------------------------------------------------------------
// const getCarType = (cars, type) => {
//   return cars.filter(({type: carType}) => carType === type)
// };
// console.log(getCarType(cars, 'suv'));
// ---------------------------------------------------------------------------------------
// const getByAmount = cars => {
//   return [...cars].sort((a, b) => a.amount - b.amount)
// };
// console.log(getByAmount(cars));
// ---------------------------------------------------------------------------------------
// const sortByModel = (cars, order) => {
// //  return [...cars].sort((a, b) => order === 'abc' 
// //  ? a.model.localeCompare(b.model) 
// //  : b.model.localeCompare(a.model))
// // };
// // –∞–±–æ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑—É–≤–∞—Ç–∏
// return [...cars].sort(({model: a}, {model: b}) => order === 'abc' 
// ? a.localeCompare(b) 
// : b.localeCompare(a))
// };
// console.log(sortByModel(cars, 'abc')); // model –ø–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É
// console.log(sortByModel(cars, 'desc')); // model –∑ –∫—ñ–Ω—Ü—è –∞–ª—Ñ–∞–≤—ñ—Ç—É
// -----------------------------------------------------------------------------------------
// const getTotalAmount = cars => cars.reduce((acc, {amount}) => acc + amount, 0);
// console.log(getTotalAmount(cars));
// -----------------------------------------------------------------------------------------
// const getModelOnSale = cars => cars.filter(({onSale}) => onSale).map(({make, model}) => `${make} ${model}`);
// console.log(getModelOnSale(cars));

// const books = [
//   {
//     title: "The Last Kingdom",
//     author: "Bernard Cornwell",
//     rating: 8.38,
//   },
//   {
//     title: "Beside Still Waters",
//     author: "Robert Sheckley",
//     rating: 8.51,
//   },
//   {
//     title: "The Dream of a Ridiculous Man",
//     author: "Fyodor Dostoevsky",
//     rating: 7.75,
//   },
//   { title: "Redder Than Blood", author: "Tanith Lee", rating: 7.94 },
//   {
//     title: "The Dreams in the Witch House",
//     author: "Howard Lovecraft",
//     rating: 8.67,
//   },
// ];
// const MIN_BOOK_RATING = 8;
// const names = [...books].filter(item => {
//   if (item.rating > MIN_BOOK_RATING) {
//     return item.author;
//   }
// }).map(item => item.author).sort((a,b) => a.localeCompare(b));
// console.log(names); // ¬†['Bernard Cornwell', 'Howard Lovecraft', 'Robert Sheckley']

// const users = [
//   {
//     name: "Moore Hensley",
//     email: "moorehensley@indexia.com",
//     eyeColor: "blue",
//     friends: ["Sharron Pace"],
//     isActive: false,
//     balance: 2811,
//     gender: "male"
//   },
//   {
//     name: "Sharlene Bush",
//     email: "sharlenebush@tubesys.com",
//     eyeColor: "blue",
//     friends: ["Briana Decker", "Sharron Pace"],
//     isActive: true,
//     balance: 3821,
//     gender: "female"
//   },
//   {
//     name: "Ross Vazquez",
//     email: "rossvazquez@xinware.com",
//     eyeColor: "green",
//     friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
//     isActive: false,
//     balance: 3793,
//     gender: "male"
//   },
//   {
//     name: "Elma Head",
//     email: "elmahead@omatom.com",
//     eyeColor: "green",
//     friends: ["Goldie Gentry", "Aisha Tran"],
//     isActive: true,
//     balance: 2278,
//     gender: "female"
//   },
//   {
//     name: "Carey Barr",
//     email: "careybarr@nurali.com",
//     eyeColor: "blue",
//     friends: ["Jordan Sampson", "Eddie Strong", "Adrian Cross"],
//     isActive: true,
//     balance: 3951,
//     gender: "male"
//   },
//   {
//     name: "Blackburn Dotson",
//     email: "blackburndotson@furnigeer.com",
//     eyeColor: "brown",
//     friends: ["Jacklyn Lucas", "Linda Chapman", "Adrian Cross", "Solomon Fokes"],
//     isActive: false,
//     balance: 1498,
//     gender: "male"
//   },
//   {
//     name: "Sheree Anthony",
//     email: "shereeanthony@kog.com",
//     eyeColor: "brown",
//     friends: ["Goldie Gentry", "Briana Decker"],
//     isActive: true,
//     balance: 2764,
//     gender: "female"
//   }
// ];
// const getNamesSortedByFriendCount = users => {
//   return [...users].sort((a, b) => a.friends.length - b.friends.length).map(item => item.name);
// };
// const getSortedFriends = users => {
//   return users.flatMap(item => item.friends)
//     .filter((item, index, array) => array.indexOf(item) === index).sort();
// };
// const getTotalBalanceByGender = (users, gender) => {
//   // return users.reduce((acc, item) => {
//   //   if (item.gender === gender) {
//   //     return acc + item.balance;
//   //   }
//   //   return acc;
//   // }, 0)
//   //---------------------------------------------------------------------------------------------
//   return users.filter(item => item.gender === gender)
//     .reduce((acc, item) => acc + item.balance, 0)
// };
// console.log(getNamesSortedByFriendCount(users));
// // ["Moore Hensley", "Sharlene Bush", "Elma Head", "Sheree Anthony", "Ross Vazquez", "Carey Barr", 
// // "Blackburn Dotson"]
// console.log(getSortedFriends(users));
// // ["Adrian Cross", "Aisha Tran", "Briana Decker", "Eddie Strong", "Goldie Gentry", "Jacklyn Lucas", 
// // "Jordan Sampson", "Linda Chapman", "Marilyn Mcintosh", "Naomi Buckner", "Padilla Garrison", 
// // "Sharron Pace", "Solomon Fokes"]
// console.log(getTotalBalanceByGender(users, "male")); // 12053
// console.log(getTotalBalanceByGender(users, "female")); // 8863


// ‚ùó‚ùó‚ùó—Ç–∞–∫–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞ —Å–ø—ñ–≤–±–µ—Å—ñ–¥—ñ 
// const str = 'jkfnvtydbvvdfpoimdjkldscvzaa';
// const result = str.split('').reduce((acc, item) => {
//   acc.hasOwnProperty(item) ? acc[item] +=1 : acc[item] = 1;
//   return acc;
// }, {})
// console.log(result);
//-------------------------------------------------------------
// function getLettersCount(input) {
//   const result = {};
//   for (const letter of input) {
//     result[letter] = (result[letter] || 0) + 1;
//     console.log(result.letter);
    
//   }
//   return result;
// }
// console.log(getLettersCount(str)); // –æ–±'—î–∫—Ç –≤ —è–∫–æ–≥–æ –ª—ñ—Ç–µ—Ä–∞: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—Ç–µ—Ä –≤ —Ä—è–¥–∫—É (–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–Ω—è)

// function logCars(arr) {
// //   const result = arr.reduce((acc, item, idx) => {
// //     return acc + `${idx+1} - ${item}\n`
// // }, arr.length ?`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ: ${arr.length}\n` : `–í–∏–±–∞—á—Ç–µ –∞–≤—Ç–æ –Ω–µ–º–∞—î ü§∑‚Äç‚ôÄÔ∏è`)
//   // return result
//   const result = arr.reduce((acc, item, idx) => {
//     return acc + `${idx+1} - ${item}\n`

//   }, arr.length ? `–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ: ${arr.length}\n` : `–í–∏–±–∞—á—Ç–µ –∞–≤—Ç–æ –Ω–µ–º–∞—î ü§∑‚Äç‚ôÄÔ∏è`)
//   return result;
// }
// console.log(logCars(['Honda', 'Audi', 'BMW', 'Skoda', 'Ford', 'Renault']));
// console.log(logCars([]));

// const fruitBasket = ['apple', 'banana', 'orange', 'cherry', 'banana', 'apple', 'orange'];
// const count = fruitBasket.reduce((acc, item) => {
//   acc[item] = (acc[item] || 0) + 1;
//   return acc;
// }, {});
// console.log(count); {banana: 2, cherry: 1, apple: 2, orange: 2}


// üåûüåûüåûüåûüåû–ú–æ–¥—É–ª—å 5.üåûüåûüåûüåûüåû 
// üåª–ú–æ–¥—É–ª—å 5 (–£—Ä–æ–∫ 1). –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ this. –ü—Ä–æ—Ç–æ—Ç–∏–ø–∏ —Ç–∞ –∫–ª–∞—Å–∏

// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç calculator –∑ —Ç—Ä—å–æ–º–∞ –º–µ—Ç–æ–¥–∞–º–∏
// const calculator = {
//   read(a, b) {
//     this.a = a;
//     this.b = b;
//     return `Values set: a = ${this.a}, b = ${this.b}`;
//   },
//   add() {
//     return (this.a ?? 0) + (this.b ?? 0);
//   }, 
//   mult() {
//     return (this.a ?? 1) * (this.b ?? 1);
//   }
// }
// calculator.read(3); 
// console.log(calculator.add()); // 3
// console.log(calculator.mult()); // 3
// console.log(calculator.read(3, 2)); // Values set: a = 3, b = 2
// console.log(calculator.add()); // 5
// console.log(calculator.mult()); // 6

// function foo(a, b) {
//   console.log(this, a, b);
// }
// foo.call({}, 5, 10); 
// foo.apply({}, [6, 11]); 
// foo.bind({}, 7, 12); 

// const objA = {
//   name: 'A',
//   myAge(a, b) {
//     console.log(this, a, b);
//   }
// }
// const objB = {
//   name: 'B',
//   myAge: objA.myAge
// }
// const fromBackEnd = [1, 2];
// const str = objA.myAge.call(objB, ...fromBackEnd);
// console.log(str);

// const calculator = {
//   read(a, b) {
//     this.a = a;
//     this.b = b;
//   },
//   add() {
//     return (this.a ?? 0) + (this.b ?? 0);
//   },
//   mult() {
//     return (this.a ?? 1) * (this.b ?? 1);
//   }
// };
// calculator.read();
// console.log(calculator.add());
// console.log(calculator.mult());

// class Car {
//   #brand
//    // –°–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É –∫–ª–∞—Å—É
//   constructor( brand, model, price ) {
//     // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –µ–∫–∑–µ–º–ø–ª—è—Ä–∞
//     this.#brand = brand; // #–ø—Ä–∏–≤–∞—Ç–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å
//     this.model = model;
//     this.price = price;
//   }
//   getPrice() {
//   return this.price;
//   };
//   changePrice(newPrice) {
//     return this.price = newPrice;
//   };
// };
// console.log(new Car('Audi', 'Q3', 36000)); // {brand: 'Audi', model: 'Q3', price: 36000 }

// class Storage {
//   constructor(items) {
//     this.items = items;
//   };
//   getItems() {
//     return this.items;
//   };
//   addItem(newItem) {
//     return this.items.push(newItem);
//   };
//   removeItem(reItem) {
//     return this.items = this.items.filter(item => item !== reItem);
//   };
// };
// const storage = new Storage(["Nanitoids", "Prolonger", "Antigravitator"]);
// console.log(storage.getItems()); // ["Nanitoids", "Prolonger", "Antigravitator"]
// console.log(storage.addItem("Droid"));
// console.log(storage.getItems()); // ["Nanitoids", "Prolonger", "Antigravitator", "Droid"]
// console.log(storage.removeItem("Prolonger"));
// console.log(storage.getItems()); // ["Nanitoids", "Antigravitator", "Droid"]

class User {
  email;
  constructor(email) {
    this.email = email;
  }
  get emaiil() {
    return this.email;
  }
  set emaiil(newEmail) {
    this.email = newEmail;
  }
}
class Admin extends User {
  static AccessLevel = {
    BASIC: "basic",
    SUPERUSER: "superuser",
  };
  constructor({ email, accessLevel }) {
    super(email);
    this.accessLevel = accessLevel;
  }
}
const mango = new Admin({
  email: "mango@mail.com",
  accessLevel: Admin.AccessLevel.SUPERUSER,
});
console.log(mango.email); // "mango@mail.com"
console.log(mango.accessLevel); // "superuser"



//üìåüìåüìå–ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
//1Ô∏è‚É£–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
// const users = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 17 },
//   { name: "Charlie", age: 30 }
// ];
// function filterUsers(users, minAge) {
//   return users.filter(item => item.age >= minAge).map(item => item.name)
// };
// console.log(filterUsers(users, 18)); // ["Alice", "Charlie"]
//----------------------------------------------------------------------------------------------
//üîπ
// const users = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 30 },
//   { name: "Charlie", age: 25 },
//   { name: "David", age: 35 }
// ];
// function getUniqueAges(users) {
//   return users.map(item => item.age).filter((item, index, arr) => arr.indexOf(item) === index);
// }
// console.log(getUniqueAges(users)); // [25, 30, 35]
//------------------------------------------------------------------------------------------------
//üîπ
// const users = [
//   { name: "Alice", isActive: true },
//   { name: "Bob", isActive: false },
//   { name: "Charlie", isActive: true },
//   { name: "David", isActive: false }
// ];
// function getActiveUsers(users) {
//   return users.filter(item => item.isActive).map(item => item.name);
// }
// console.log(getActiveUsers(users)); // ["Alice", "Charlie"]
//------------------------------------------------------------------------------------------------
//üîπ
// const products = [
//   { name: "Laptop", price: 1200 },
//   { name: "Phone", price: 800 },
//   { name: "Tablet", price: 400 },
//   { name: "Smartwatch", price: 250 }
// ];
// function filterProducts(products, minPrice, maxPrice) {
//   return products.filter(item => item.price >= minPrice && item.price <= maxPrice)
//     .map(item => item.name);
// }
// console.log(filterProducts(products, 200, 850)); // ['Phone', 'Tablet', 'Smartwatch']
//-------------------------------------------------------------------------------------------------
//üîπ
// const users = ["Alice", "Bob", "Charlie", "David"];
// function getNameLengths(users) {
//   return users.map(item => item.length);
// };
// console.log(getNameLengths(users)); // [5, 3, 7, 5]
//-------------------------------------------------------------------------------------------------
//üîπ
// const books = [
//   { title: "Dune", genre: "Sci-Fi" },
//   { title: "1984", genre: "Dystopia" },
//   { title: "The Hobbit", genre: "Fantasy" },
//   { title: "Brave New World", genre: "Dystopia" }
// ];
// function getBooksByGenre(books, genre) {
//   return books.filter(item => item.genre === genre).map(item => item.title);
// };
// function getUniqueGenres(books) {
//   return books.map(item => item.genre).filter((item, idx, arr) => arr.indexOf(item) === idx);
// }
// console.log(getBooksByGenre(books, "Dystopia")); // ["1984", "Brave New World"]
// console.log(getUniqueGenres(books)); // ['Sci-Fi', 'Dystopia', 'Fantasy']
//--------------------------------------------------------------------------------------------------
//üîπ
// const users = [
//   { name: "Alice", email: "alice@gmail.com" },
//   { name: "Bob", email: "bob@yahoo.com" },
//   { name: "Charlie", email: "charlie@gmail.com" },
//   { name: "David", email: "david@outlook.com" }
// ];
// function getUsersByDomain(users, domain) {
//   return users.filter(item => item.email.includes(domain)).map(item => item.name);
// };
// console.log(getUsersByDomain(users, "gmail.com")); // ["Alice", "Charlie"]
//--------------------------------------------------------------------------------------------------
//üîπ
// const products = [
//   { name: "Laptop", price: 1200 },
//   { name: "Phone", price: 800 },
//   { name: "Tablet", price: 400 },
//   { name: "Smartwatch", price: 250 }
// ];
// function getMostExpensiveProduct(products) {
//   return products.reduce((acc, item) => (item.price > acc.price ? item : acc), products[0]).name;
// };
// console.log(getMostExpensiveProduct(products)); // "Laptop"
//--------------------------------------------------------------------------------------------------
//üîπ
// const users = ["Alice", "Bob", "Charlie"];
// function greetUsers(users) {
//   return users.map(item => `–ü—Ä–∏–≤—ñ—Ç, ${item}!`)
// };
// console.log(greetUsers(users)); // ["–ü—Ä–∏–≤—ñ—Ç, Alice!", "–ü—Ä–∏–≤—ñ—Ç, Bob!", "–ü—Ä–∏–≤—ñ—Ç, Charlie!"]
//---------------------------------------------------------------------------------------------------
//üîπ
// const users = [
//   { name: "Alice", friends: ["Bob", "Charlie", "Alice", "David"] },
//   { name: "Bob", friends: ["Alice", "Charlie"] },
//   { name: "Charlie", friends: ["Bob", "David"] },
//   { name: "David", friends: ["Alice", "Charlie"] }
// ];
// function getMostPopularFriend(users) {
//   // 1 –≤–∞—Ä—ñ–∞–Ω—Ç ("Charlie")
//   // const friendCount = {};
//   // users.forEach(user => user.friends.forEach(friend => {
//   //    friendCount[friend] = (friendCount[friend] || 0) + 1;
//   // }));
//   // return Object.keys(friendCount).reduce((acc, friend) =>
//   //   friendCount[friend] > friendCount[acc] ? friend : acc
//   // );
//   //----------------------------------------------------------------------------------------
//   // 2 –≤–∞—Ä—ñ–∞–Ω—Ç (['Charlie', 'Alice'])
//   const friendCount = {};
//   users.forEach(user => {
//     user.friends.forEach(friend => {
//       friendCount[friend] = (friendCount[friend] || 0) + 1;
//     });
//   });
//   const maxCount = Math.max(...Object.values(friendCount));
//   return Object.keys(friendCount).filter(friend => friendCount[friend] === maxCount);
//   //------------------------------------------------------------------------------------------
// 3 –≤–∞—Ä—ñ–∞–Ω—Ç (['Charlie', 'Alice'])
  // const arrFriends = users.flatMap(item => item.friends);
  // const obj = {};
  // arrFriends.forEach(item => {
  //   if (!obj[item]) {
  //     obj[item] = 1
  //   } else {obj[item] += 1}
  // })
  // const arrVal = Object.values(obj);
  // const maxNumber = Math.max(...arrVal);
  // const arr = Object.entries(obj);
  // return arr.filter(([key, val]) => val === maxNumber ? key : 0).map(item => item[0])
  //-----------------------------------------------------------------------------------------
  // 4 –≤–∞—Ä—ñ–∞–Ω—Ç (['Charlie', 'Alice'])
//   const friendCount = {};
//   users.forEach(item => item.friends.forEach(item => {
//     friendCount[item] ? friendCount[item] +=1 : friendCount[item] = 1
//   }))
//   const maxNumber = Math.max(...Object.values(friendCount));
//   return Object.keys(friendCount).filter(item => friendCount[item] === maxNumber)
// };
// console.log(getMostPopularFriend(users)); // —ñ–º'—è –¥—Ä—É–≥–∞, —è–∫–æ–≥–æ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –∑–≥–∞–¥—É—é—Ç—å —É friends
//----------------------------------------------------------------------------------------------
// üîπ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –º–æ–∂–Ω–∞ —Å–∫–ª–∞—Å—Ç–∏ —Å–ª–æ–≤–æ word –∑ –ª—ñ—Ç–µ—Ä, —è–∫—ñ —î –≤ —Ä—è–¥–∫—É letters
// function isPossibleToCompose(word, letters) {
//   // 1 –≤–∞—Ä—ñ–∞–Ω—Ç
//   // const wordObj = {};
//   // const lettersObj = {};
//   // word.split('').forEach(item => {
//   //   wordObj[item] = (wordObj[item] || 0) + 1
//   // })
//   // letters.split('').forEach(item => {
//   //   lettersObj[item] = (lettersObj[item] || 0) + 1
//   // })
//   // for (const key in wordObj) {
//   //   if (wordObj[key] > (lettersObj[key] || 0)) {
//   //     return false
//   //   }
//   // }
//   // return true
//   //--------------------------------------------------
//   // 2 –≤–∞—Ä—ñ–∞–Ω—Ç
//   const countChars = str => {
//     return str.split('').reduce((acc, char) => {
//       acc[char] = (acc[char] || 0) + 1;
//       return acc;
//     }, {})
//   }
//   const wordObj = countChars(word);
//   const lettersObj = countChars(letters);
//   return Object.keys(wordObj).every(char => wordObj[char] <= (lettersObj[char] || 0));
// }
// console.log(isPossibleToCompose('aa', 'abc')) // false
// console.log(isPossibleToCompose('abc', 'dcba')); // true
// console.log(isPossibleToCompose('aabbcc', 'bcabcaddff')); // true

//2Ô∏è‚É£–û–±—Ä–æ–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π.
// –†–µ–∞–ª—ñ–∑—É–π —Ñ—É–Ω–∫—Ü—ñ—é fetchData(url), —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î fetch –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è JSON-–¥–∞–Ω–∏—Ö
// –∑–∞ –ø–µ—Ä–µ–¥–∞–Ω–∏–º URL —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π async/await.
// async function fetchData(url) {
//   try {
//     const response = await fetch(url) // –í–∏–∫–æ–Ω—É—î–º–æ HTTP-–∑–∞–ø–∏—Ç
//     if (!response.ok) {
//       throw new Error(`HTTP error! Status: ${response.status}`); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
//     }
//     const data = await response.json(); // –†–æ–∑–±–∏—Ä–∞—î–º–æ JSON-–¥–∞–Ω—ñ
//     return data
//   } catch (error) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", error);
//     return null; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ null —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
//   }
// }
// // –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
// fetchData("https://jsonplaceholder.typicode.com/todos/1")
//   .then(data => console.log(data))
//   .catch(error => console.error(error));

//3Ô∏è‚É£–ù–∞–ø–∏—à–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é sumTo(n), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É –≤—Å—ñ—Ö —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ n
// function sumTo(n) {
//   if (n === 1) return 1;
//   return n + sumTo(n - 1);
// };
// console.log(sumTo(5)); // 15 (1 + 2 + 3 + 4 + 5)

//4Ô∏è‚É£–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ Promise
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é delay(ms), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î Promise, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ ms –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥.
// function delay(ms) {
//   return new Promise(resolve => {
//     setTimeout(() => {
//       resolve()
//     }, ms)
//   })

// };
// delay(2000).then(() => console.log("–ü—Ä–æ—à–ª–æ 2 —Å–µ–∫—É–Ω–¥—ã"));

//5Ô∏è‚É£–ß–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ —ñ–º–º—É—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å
// üîπ–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é updateUserEmail(users, name, newEmail), —è–∫–∞ –Ω–µ –º—É—Ç—É—î –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤,
// –∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –æ–Ω–æ–≤–ª–µ–Ω–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –ø–æ—à—Ç–æ—é –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ name.
// function updateUserEmail(users, name, newEmail) {
//   // –º—É—Ç—É—î –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤
//   // const user = users.find(item => item.name === name);
//   // if (user) {
//   //   user.email = newEmail;
//   //   return user;
//   // }
//   // return null
//   //--------------------------------------------------------------------------------------
//   // –Ω–µ –º—É—Ç—É—î –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤
//   return users.map(user =>
//     user.name === name
//       ? { ...user, email: newEmail } // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç —ñ–∑ –æ–Ω–æ–≤–ª–µ–Ω–æ—é email
//       : user // –Ü–Ω—à—ñ –æ–±'—î–∫—Ç–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
//   );
// }
// const users = [
//   { name: "Alice", email: "alice@example.com" },
//   { name: "Bob", email: "bob@example.com" }
// ];
// console.log(updateUserEmail(users, "Alice", "alice@new.com"));
// console.log(users);
//-------------------------------------------------------------------------------------------
//üîπ
// const users = [
//   { name: "Alice", status: "active" },
//   { name: "Bob", status: "inactive" }
// ];
// function updateUserStatus(users, name, newStatus) {
//   return users.map(user => user.name === name ? { ...user, status: newStatus } : user)
// };
// const updatedUsers = updateUserStatus(users, "Bob", "active");
// console.log(updatedUsers);
//-------------------------------------------------------------------------------------------
// üîπ–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ü–º–º—É—Ç–∞–±–µ–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è)
// const users = [
//   { name: "Alice", email: "alice@example.com" },
//   { name: "Bob", email: "bob@example.com" }
// ];
// function deleteUser(users, name) {
//   return users.filter(user => user.name !== name);
// };
// const newUsers = deleteUser(users, "Alice");
// console.log(newUsers); // [{ name: "Bob", email: "bob@example.com" }]
// console.log(users); // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è
//--------------------------------------------------------------------------------------------
// üîπ–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ß–∏—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è)
// const users = [
//   { name: "Alice", status: "active" },
//   { name: "Bob", status: "inactive" },
//   { name: "Charlie", status: "active" }
// ];
// function countActiveUsers(users) {
//   return users.reduce((acc, user) => {
//     return user.status === "active" ? acc + 1 : acc
//   }, 0);
// }
// console.log(countActiveUsers(users)); // 2
//-------------------------------------------------------------------------------------------
// üîπ–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ü–º–º—É—Ç–∞–±–µ–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è)
// const users = [
//   { name: "Alice", email: "alice@example.com" }
// ];
// function addUser(users, newUser) {
//   const userExists = users.some(user => user.name === newUser.name);
//   return userExists ? [...users] : [...users, newUser];
// }
// const updatedUsers = addUser(users, { name: "Bob", email: "bob@example.com" });
// console.log(updatedUsers);
// // [
// //   { name: "Alice", email: "alice@example.com" },
// //   { name: "Bob", email: "bob@example.com" }
// // ]
// console.log(users); // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è
//-------------------------------------------------------------------------------
// üîπ–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É (–Ü–º–º—É—Ç–∞–±–µ–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è)
// const products = [
//   { id: 1, name: "Laptop", quantity: 5 },
//   { id: 2, name: "Phone", quantity: 10 }
// ];
// function updateProductQuantity(products, id, newQuantity) {
//   return products.map(item => item.id === id ? { ...item, quantity: newQuantity } : item);
// }
// const updatedProducts = updateProductQuantity(products, 1, 8);
// console.log(updatedProducts);
// // [
// //   { id: 1, name: "Laptop", quantity: 8 },
// //   { id: 2, name: "Phone", quantity: 10 }
// // ]
// console.log(products); // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è

//6Ô∏è‚É£–ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—è –∑ –æ–±'—î–∫—Ç–∞–º–∏
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é groupByAge(users), —è–∫–∞ –∑–≥—Ä—É–ø—É—î –º–∞—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –≤—ñ–∫–æ–º —É –≤–∏–≥–ª—è–¥—ñ –æ–±'—î–∫—Ç–∞.
// const users = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 30 },
//   { name: "Charlie", age: 25 }
// ];
// function groupByAge(users) {
//   return users.reduce((acc, user) => {
//     const age = user.age;
//     if (!acc[age]) {
//       acc[age] = [];
//     }
//     acc[age].push(user)
//     return acc;
//   }, {})
// };
// console.log(groupByAge(users));
// // –í–∏—Ö—ñ–¥–Ω–∏–π –æ–±'—î–∫—Ç:
// // {
// //   25: [{ name: "Alice", age: 25 }, { name: "Charlie", age: 25 }],
// //   30: [{ name: "Bob", age: 30 }]
// // }
//------------------------------------------------------------------------------------------
//üîπ
// const users = [
//   { name: "Alice", status: "active" },
//   { name: "Bob", status: "inactive" },
//   { name: "Charlie", status: "active" },
//   { name: "David", status: "pending" }
// ];
// function countByStatus(users) {
//   // // 1 –≤–∞—Ä—ñ–∞–Ω—Ç
//   // return users.reduce((acc, user) => {
//   //   const status = user.status;
//   //   if (!acc[status]) {
//   //     acc[status] = 1
//   //   } else {acc[status] += 1}
//   //   return acc;
//   // }, {})
//   // 2 –≤–∞—Ä—ñ–∞–Ω—Ç
//   // return users.reduce((acc, { status }) => {
//   //   acc[status] = (acc[status] || 0) + 1;
//   //   return acc;
//   // }, {});
// }
// console.log(countByStatus(users)); // { active: 2, inactive: 1, pending: 1 }
//------------------------------------------------------------------------------------------
// üîπ–û–±'—î–¥–Ω–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –æ–±'—î–∫—Ç—ñ–≤ –∑–∞ –∫–ª—é—á–µ–º
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é mergeById(arr1, arr2), —è–∫–∞ –æ–±'—î–¥–Ω—É—î –¥–≤–∞ –º–∞—Å–∏–≤–∏ –æ–±'—î–∫—Ç—ñ–≤ –∑–∞ –æ–¥–Ω–∞–∫–æ–≤–∏–º id.–Ø–∫—â–æ
// –æ–±'—î–∫—Ç –∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º id —î –≤ –æ–±–æ—Ö –º–∞—Å–∏–≤–∞—Ö, –æ–±'—î–¥–Ω–∞–π —ó—Ö–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ.
// const arr1 = [
//   { id: 1, name: "Alice" },
//   { id: 2, name: "Bob" }
// ];
// const arr2 = [
//   { id: 1, age: 25 },
//   { id: 3, name: "Charlie", age: 30 }
// ];
// function mergeById(arr1, arr2) {
//   const mergedMap = {};
//   [...arr1, ...arr2].forEach(item => {
//     if (mergedMap[item.id]) {
//       mergedMap[item.id] = {...mergedMap[item.id], ...item}
//     } else {mergedMap[item.id] = {...item}}
//   })
//   return mergedMap;
// }
// console.log(mergeById(arr1, arr2));
// [
//   { id: 1, name: "Alice", age: 25 },
//   { id: 2, name: "Bob" },
//   { id: 3, name: "Charlie", age: 30 }
// ]
//-----------------------------------------------------------------------------------------
// üîπ–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –æ–±'—î–∫—Ç–∞ –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é filterObject(obj, value), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç —Ç—ñ–ª—å–∫–∏ –∑ —Ç–∏–º–∏
// –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –¥–æ—Ä—ñ–≤–Ω—é—î value.
// const data = {
//   a: 1,
//   b: 2,
//   c: 1,
//   d: 3
// };
// function filterObject(obj, value) {
//   return Object.fromEntries(Object.entries(obj).filter(([key, val]) => val === value));
// }
// console.log(filterObject(data, 1)); // { a: 1, c: 1 }
//----------------------------------------------------------------------------------------------
// üîπ–ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –∑–∞ –ø–µ—Ä—à–∏–º —Å–∏–º–≤–æ–ª–æ–º —ñ–º–µ–Ω—ñ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é groupByFirstLetter(users), —è–∫–∞ –∑–≥—Ä—É–ø—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –ø–µ—Ä—à–æ—é –ª—ñ—Ç–µ—Ä–æ—é —ó—Ö —ñ–º–µ–Ω—ñ.
// const users = [
//   { name: "Alice" },
//   { name: "Arnold" },
//   { name: "Bob" },
//   { name: "Charlie" }
// ];
// function groupByFirstLetter(users) {
//   const obj = {};
//   users.forEach(item => {
//     const firstLetter = item.name[0];
//     if (!obj[firstLetter]) {
//       obj[firstLetter] = [item]
//     } else {obj[firstLetter].push(item)}
//   });
//   return obj;
// };
// console.log(groupByFirstLetter(users));
// // {
// //   A: [{ name: "Alice" }, { name: "Arnold" }],
// //   B: [{ name: "Bob" }],
// //   C: [{ name: "Charlie" }]
// // }
//--------------------------------------------------------------------------------------------------
//üîπ–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Å–∏–≤—É –æ–±'—î–∫—Ç—ñ–≤ —É –æ–±'—î–∫—Ç –∑ –∫–ª—é—á–∞–º–∏
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é arrayToObject(arr, key), —è–∫–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ —É –æ–±'—î–∫—Ç, –¥–µ –∫–ª—é—á–∞–º–∏ –±—É–¥—É—Ç—å
// –∑–Ω–∞—á–µ–Ω–Ω—è, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É key.
// const users = [
//   { id: 1, name: "Alice" },
//   { id: 2, name: "Bob" },
//   { id: 3, name: "Charlie" }
// ];
// function arrayToObject(arr, key) {
//   return arr.reduce((acc, item) => {
//     acc[item[key]] = item;
//     return acc;
//   }, {})
// }
// console.log(arrayToObject(users, 'id'));
// // {
// //   1: { id: 1, name: "Alice" },
// //   2: { id: 2, name: "Bob" },
// //   3: { id: 3, name: "Charlie" }
// // }

//7Ô∏è‚É£–û–±—Ö—ñ–¥ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é countNestedKeys(obj), —è–∫–∞ –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—é—á—ñ–≤ —É –≤–∫–ª–∞–¥–µ–Ω–æ–º—É –æ–±'—î–∫—Ç—ñ.
// const obj = { a: 1, b: { c: 2, d: { e: 3 } } };
// function countNestedKeys(obj) {
//   let count = 0;
//   for (const key in obj) {
//     count += 1;
//     if (typeof obj[key] === 'object' && obj[key] !== null) {
//       count += countNestedKeys(obj[key])
//     }
//   }
//   return count;
// }
// console.log(countNestedKeys(obj)); // 5 (a, c, e, d, b)
// console.log(typeof null); // object

//8Ô∏è‚É£üí¶–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (—è–∫—â–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ Node.js)
// –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–∏–π HTTP - —Å–µ—Ä–≤–µ—Ä –Ω–∞ http - –º–æ–¥—É–ª—ñ Node.js,
// —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î JSON –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º { message: "Hello, world!" }.
// const http = require('http'); // –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è http
// const PORT = 3000; // –ü–æ—Ä—Ç, –Ω–∞ —è–∫–æ–º—É –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ —Å–µ—Ä–≤–µ—Ä
// // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞
// const server = http.createServer((req, res) => {
//   res.writeHead(200, { 'Content-Type': 'application/json' }); // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
//   res.end(JSON.stringify({ message: 'Hello, world!' })); // –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è JSON-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
// });
// // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// server.listen(PORT, () => {
//   console.log(`–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ http://localhost:${PORT}`);
// });

//--------------------------------------------------------------------------------------------
// let a = 5;
// let b = 7;
// let c = a+++b;
// console.log(a, b, c);
// console.log(true + true);
// var a = false;
// if (a == `0`) {
//     alert(`==`);
// }
// if (a === `0`) {
//     alert(`===`);
// }

// for (var i = 0; i > -10; i-=3) {
//   i++;
//   console.log(i); // 1 -1 -3 -5 -7
// }

// var i = 0;
// while (i++ < 5) {alert( i );} // 1 2 3 4 5

// What is output to the console in 2 line?
// var f = function printLog() {
// console.log('My function');
// }
// f; // nothing

// var a = 1;
// function foo() {
//   function innertFoo(b=3) {
//     let a = 3;
//     return a + b;
//   }
//   return innertFoo(2) + a; // innertFoo(2) –ø–æ–≤–µ—Ä—Ç–∞—î 5, —ñ –¥–∞–ª—ñ 5+1=6
// }
// console.log(foo()); // 6

// function sum(a, b){
//   a + b;
// }
// let result = sum(2, 5);
// console.log(result); // undefined

// üî•üî•üî•üî•üî•freeCodeCampüî•üî•üî•üî•üî•
// –®–∞–±–ª–æ–Ω —É –º–µ–∂–∞—Ö —Ä—è–¥–∫–∞
// –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å .match —î –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–º 
// –¥–æ –º–µ—Ç–æ–¥—É .test, —è–∫–∏–º –≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∏—Å—å –¥–æ—Ç–µ–ø–µ—Ä:
// 'string'.match(/regex/);
// /regex/.test('string');


// // –ì–µ—Ç–µ—Ä–∏ –π —Å–µ—Ç–µ—Ä–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –æ–±‚Äô—î–∫—Ç–∞
// class Thermostat {
//   constructor(F) {
//     this._tempF = F;
//   }
//   // getter
//   get temperature() {
//     return (5 / 9) * (this._tempF - 32);
//   }
//   // setter –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å—ñ—è
//   set temperature(updatedTempC) {
//     this._tempF = updatedTempC * 9.0 / 5 + 32;
//   }
// }
// const thermos = new Thermostat(76); // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É —à–∫–∞–ª—ñ –§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞
// let temp = thermos.temperature; // 24.44 –≥—Ä–∞–¥—É—Å—ñ–≤ –∑–∞ –¶–µ–ª—å—Å—ñ—î–º
// thermos.temperature = 26;
// temp = thermos.temperature; // 26 –≥—Ä–∞–¥—É—Å—ñ–≤ –∑–∞ –¶–µ–ª—å—Å—ñ—î–º


// // –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–≤–æ–≤–∏–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤ —ñ–∑ m —Ä—è–¥–∫–∞–º–∏ —Ç–∞ n —Å—Ç–æ–≤–ø—Ü—è–º–∏ –∑ –Ω—É–ª—ñ–≤ 
// function zeroArray(m, n) {
//   // –°—Ç–≤–æ—Ä—ñ—Ç—å 2-D –º–∞—Å–∏–≤ —ñ–∑ m-—Ä—è–¥–∫—ñ–≤ m —Ç–∞ n-—Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤ –Ω—É–ª—ñ–≤
//   let newArray = [];
//     for (let i = 0; i < m; i++) {
//     // –î–æ–¥–∞–π—Ç–µ m-–∏–π —Ä—è–¥–æ–∫ –¥–æ newArray
//   let row = [];
//     for (let j = 0; j < n; j++) {
//     // –î–æ–¥–∞—î n –Ω—É–ª—ñ–≤ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—è–¥–∫–∞, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç–æ–≤–ø—á–∏–∫–∏
//     row.push(0);
//     }
//     // –®—Ç–æ–≤—Ö–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Ä—è–¥–æ–∫, —è–∫–∏–π —Ç–µ–ø–µ—Ä –º—ñ—Å—Ç–∏—Ç—å n –Ω—É–ª—ñ–≤, –¥–æ –º–∞—Å–∏–≤—É
//     newArray.push(row);
//   }
//   return newArray;
// }
// let matrix = zeroArray(3, 2);
// console.log(matrix); // [[ 0, 0 ], [ 0, 0 ], [ 0, 0 ]]

// function forecast(arr) {
//   return arr.splice(2, 2);
// }
// console.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms'])); // ['warm', 'sunny']

// function forecast(arr) {
//   arr.splice(2, 2);
//   return arr;
// }
// console.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms'])); // ['cold', 'rainy', 'cool', 'thunderstorms']

// –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é slice()
// function forecast(arr) {
//   return arr.slice(2, 4);
// }
// console.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms'])); // ['warm', 'sunny']

// –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
// function copyMachine(arr, num) {
//   let newArr = [];
//   while (num >= 1) {
//    newArr.push([...arr]); 
//     num--;
//   }
//   return newArr;
// }
// console.log(copyMachine([true, false, true], 2)); // [[ true, false, true ], [ true, false, true ]]

// function quickCheck(arr, elem) {
//   return arr.indexOf(elem) !== -1;
// }
// console.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms')); // false

// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω —Ü–∏–∫–ª for, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—É –≤–µ—Ä—Å—ñ—é –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ –º–∞—Å–∏–≤—É —Ç–∞–∫, —â–æ–± –±—É–ª–æ 
// –≤–∏–ª—É—á–µ–Ω–æ –±—É–¥—å-—è–∫–∏–π –≤–∫–ª–∞–¥–µ–Ω–∏–π –º–∞—Å–∏–≤ –∑ elem –≤ –º–µ–∂–∞—Ö arr.   
// function filteredArray(arr, elem) {
//   let newArr = [];
//   for (let i = 0; i < arr.length; i++) {
//     if (arr[i].indexOf(elem) === -1) {
//       newArr.push(arr[i]);
//     }
//   }
//   return newArr;
// }
// console.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3)); // []

// let myNestedArray = [
//   ["unshift", false, 1, 2, 3, "complex", "nested"],
//   ["loop", "shift", 6, 7, 1000, "method"],
//   ["concat", false, true, "spread", "array", ["deep"]],
//   ["mutate", 1327.98, "splice", "slice", "push", [["deeper"]]],
//   ["iterate", 1.3849, 7, "8.4876", "arbitrary", "depth", [[["deepest"]]]]
// ];
// let myNestedArray = [
//   'level 1',                   /* myNestedArray[0]             */
//   ['level 2'],	               /* myNestedArray[1][0]          */
//   [['level 3','deep']],	       /* myNestedArray[2][0][0]       */
//   [[['level 4','deeper']]],    /* myNestedArray[3][0][0][0]    */
//   [[[['level 5','deepest']]]]  /* myNestedArray[4][0][0][0][0] */
// ];

// let foods = {
//   apples: 25,
//   oranges: 32,
//   plums: 28,
//   bananas: 13,
//   grapes: 35,
//   strawberries: 27
// };
// function checkInventory(scannedItem) {
// return foods[scannedItem];
// }
// console.log(checkInventory("apples")); // 25

// let foods = {
//   apples: 25,
//   oranges: 32,
//   plums: 28,
//   bananas: 13,
//   grapes: 35,
//   strawberries: 27
// };
// delete foods.oranges;
// delete foods.plums;
// delete foods.strawberries;
// console.log(foods); // {apples: 25, bananas: 13, grapes: 35}

// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π —ó–π –æ–±‚Äô—î–∫—Ç –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ —á–æ—Ç–∏—Ä–∏ —ñ–º–µ–Ω—ñ: Alan, Jeff, 
// Sarah —Ç–∞ Ryan, –∞ –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É —â–æ–± –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ false
// let users = {
//   Alan: {
//     age: 27,
//     online: true
//   },
//   Jeff: {
//     age: 32,
//     online: true
//   },
//   Sarah: {
//     age: 48,
//     online: true
//   },
//   Ryan: {
//     age: 19,
//     online: true
//   }
// };
// function isEveryoneHere(userObj) {
//   return userObj.hasOwnProperty("Alan") &&
//   userObj.hasOwnProperty("Jeff") &&
//   userObj.hasOwnProperty("Sarah") &&
//   userObj.hasOwnProperty("Ryan");
// }
// -----------------------------------------
// function isEveryoneHere(userObj) {
//   return ["Alan", "Jeff", "Sarah", "Ryan"].every(name =>
//     userObj.hasOwnProperty(name)
//   );
// }
// console.log(isEveryoneHere(users)); // true

// function countOnline(usersObj) {
//   let result = 0;
//   for (let user in usersObj) {
//     if (usersObj[user].online === true) {
//       result++;
//     }
//   }
//   return result;
// }

// let users = {
//   Alan: {
//     age: 27,
//     online: false
//   },
//   Jeff: {
//     age: 32,
//     online: true
//   },
//   Sarah: {
//     age: 48,
//     online: false
//   },
//   Ryan: {
//     age: 19,
//     online: true
//   }
// };

// function getArrayOfUsers(obj) {
// return Object.keys(obj);
// }
// console.log(getArrayOfUsers(users)); // ['Alan', 'Jeff', 'Sarah', 'Ryan']

// let user = {
//   name: 'Kenneth',
//   age: 28,
//   data: {
//     username: 'kennethCodesAllDay',
//     joinDate: 'March 26, 2016',
//     organization: 'freeCodeCamp',
//     friends: [
//       'Sam',
//       'Kira',
//       'Tomo'
//     ],
//     location: {
//       city: 'San Francisco',
//       state: 'CA',
//       country: 'USA'
//     }
//   }
// };
// function addFriend(userObj, friend) {
//   userObj.data.friends.push(friend);
//   return userObj.data.friends;
// }
// console.log(addFriend(user, 'Pete')); // ['Sam', 'Kira', 'Tomo', 'Pete']

// function reverseString(str) {
//   let reversedStr = "";
//   for (let i = str.length - 1; i >= 0; i--) {
//     reversedStr += str[i];
//   }
//   return reversedStr;
// }
// -------------------------------------------
// function reverseString(str) {
//   return str.split("").reverse().join("");
// }
// console.log(reverseString("hello"));

// function factorialize(num) {
//   let n = 1;
//   for(let i = 1; i <= num; i++) {
//     n *= i; 
//   }
//   return n;
// }
// console.log(factorialize(5)); // 1*2*3*4*5=120 

// 1Ô∏è‚É£–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É –Ω–∞–π–¥–æ–≤—à–æ–≥–æ —Å–ª–æ–≤–∞ —É –¥–∞–Ω–æ–º—É —Ä–µ—á–µ–Ω–Ω—ñ.
// –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º.
// function findLongestWordLength(str) {
//   let arr = str.split(' ');
//   let maxLength = 0;
//   for (let i = 0; i < arr.length; i++) {
//     if (arr[i].length > maxLength) {
//       maxLength = arr[i].length;
//     }
//   }
//   return maxLength;
// }
// ------------------------------------------------------------------------------------
// function findLongestWordLength(s) {
//   return s.split(' ').reduce((longest, word) => Math.max(longest, word.length), 0);
// }
// ------------------------------------------------------------------------------------
// function findLongestWordLength(str) {
//   return Math.max(...str.split(" ").map(word => word.length));
// }
// console.log(findLongestWordLength("The quick brown fox jumped over the lazy dog")); // 6

// 2Ô∏è‚É£–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –º–∞—Å–∏–≤, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –∑ –∫–æ–∂–Ω–æ–≥–æ –Ω–∞–¥–∞–Ω–æ–≥–æ –ø—ñ–¥–º–∞—Å–∏–≤—É.
// function largestOfFour(arr) {
//   const results = [];
//   for (let i = 0; i < arr.length; i++) {
//     let largestNumber = arr[i][0];
//     for (let j = 1; j < arr[i].length; j++) {
//       if (arr[i][j] > largestNumber) {
//         largestNumber = arr[i][j];
//       }
//     }
//     results[i] = largestNumber;
//   }
//   return results;
// }
// console.log(largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])); //¬†[5, 27, 39, 1001]

// 3Ô∏è‚É£–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ä—è–¥–æ–∫ (–ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç, str) –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –∑–∞–¥–∞–Ω–∏–º 
// —Ü—ñ–ª—å–æ–≤–∏–º —Ä—è–¥–∫–æ–º (–¥—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç, target).
// function confirmEnding(str, target) {
//   return str.slice(-target.length) === target;
// }
// ----------------------------------------------------------------
// function confirmEnding(str, target) {
//   return str.slice(str.length - target.length) === target;
// }
// console.log(confirmEnding("Bastian", "n"));

// 4Ô∏è‚É£–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –∑–∞–¥–∞–Ω–∏–π —Ä—è–¥–æ–∫ str (–ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç) num —Ä–∞–∑—ñ–≤ (–¥—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç). –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫, 
// —è–∫—â–æ num –Ω–µ —î –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º.
// function repeatStringNumTimes(str, num) {
//   let accStr = '';
//   for(let i = 0; i < num; i++) {
//     accStr += str
//   }
//   return accStr;
// }
// ----------------------------------------------------------------------------------------------------
// function repeatStringNumTimes(str, num) {
//   return num > 0 ? str + repeatStringNumTimes(str, num - 1) : '';
// }
// console.log(repeatStringNumTimes("abc", 3)); // "abcabcabc"

// 5Ô∏è‚É£–°–∫–æ—Ä–æ—Ç—ñ—Ç—å —Ä—è–¥–æ–∫ (–ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç), —è–∫—â–æ –≤—ñ–Ω –¥–æ–≤—à–∏–π –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É —Ä—è–¥–∫–∞ (–¥—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç). 
// –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π —Ä—è–¥–æ–∫ —ñ–∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è–º ....
// function truncateString(str, num) {
//   return str.length > num ? str.slice(0, num) + "..." : str;
// }
// -------------------------------------------------------------------------------------------------
// function truncateString(str, num) {
//   if (str.length > num) {
//     return str.slice(0, num) + "...";
//   } else {
//     return str;
//   }
// }
// console.log(truncateString("A-tisket a-tasket A green and yellow basket", 8)); // A-tisket...

// 6Ô∏è‚É£–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î –º–∞—Å–∏–≤ arr —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —É –Ω—å–æ–º—É, —è–∫–∏–π –ø—Ä–æ—Ö–æ–¥–∏—Ç—å 
// —Ç–µ—Å—Ç –Ω–∞ ¬´—ñ—Å—Ç–∏–Ω–Ω—ñ—Å—Ç—å¬ª. –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –¥–∞–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç x –ø—Ä–æ–π—à–æ–≤ —Ç–µ—Å—Ç –Ω–∞ ¬´—ñ—Å—Ç–∏–Ω–Ω—ñ—Å—Ç—å¬ª, 
// —è–∫—â–æ func(x) —î true. –Ø–∫—â–æ –∂–æ–¥–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å undefined.
// function findElement(arr, func) {
//   return arr.find(func);
// }
// console.log(findElement([1, 2, 3, 4], num => num % 2 === 0)); // 2

// 7Ô∏è‚É£–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –±—É–ª–µ–≤–æ–≥–æ –ø—Ä–∏–º—ñ—Ç–∏–≤–Ω–æ–≥–æ. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å true –∞–±–æ false.
// function booWho(bool) {
//   return typeof bool === 'boolean';
// }
// console.log(booWho(null)); // false

// 8Ô∏è‚É£–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –∑–∞–¥–∞–Ω–∏–π —Ä—è–¥–æ–∫, –¥–µ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏. 
// –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —ñ–Ω—à—ñ –ª—ñ—Ç–µ—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω—ñ –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ.
// function titleCase(str) {
//   const arr = str.split(" ");
//   const updatedTitle = [];
//   for (let st in arr) {
//     updatedTitle[st] = arr[st][0].toUpperCase() + arr[st].slice(1).toLowerCase();
//   }
//   return updatedTitle.join(" ");
// }
// ------------------------------------------------------------------------------------------
// function titleCase(str) {
//   return str
//     .toLowerCase()
//     .split(" ")
//     .map(val => val.replace(val.charAt(0), val.charAt(0).toUpperCase()))
//     .join(" ");
// }
// console.log(titleCase("I'm a little tea pot")); // I'm A Little Tea Pot

// 9Ô∏è‚É£–í–∞–º –Ω–∞–¥–∞–Ω–æ –¥–≤–∞ –º–∞—Å–∏–≤–∏ —Ç–∞ —ñ–Ω–¥–µ–∫—Å.
// –°–∫–æ–ø—ñ—é–π—Ç–µ –∫–æ–∂–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ –ø–µ—Ä—à–æ–≥–æ –º–∞—Å–∏–≤—É —É –¥—Ä—É–≥–∏–π –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º.
// –†–æ–∑–ø–æ—á–Ω—ñ—Ç—å –≤—Å—Ç–∞–≤–ª—è—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ —ñ–Ω–¥–µ–∫—Å—É n –¥—Ä—É–≥–æ–≥–æ –º–∞—Å–∏–≤—É.
// –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–∏–π –º–∞—Å–∏–≤. –í—Ö—ñ–¥–Ω—ñ –º–∞—Å–∏–≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –∑–∞–ª–∏—à–∞—Ç–∏—Å—å –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏ –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó.
// function frankenSplice(arr1, arr2, n) {
//   return [...arr2.slice(0, n), ...arr1, ...arr2.slice(n)];
// }
// console.log(frankenSplice([1, 2, 3], [4, 5, 6], 1)); // [4, 1, 2, 3, 5, 6]

// üîü–í–∏–¥–∞–ª—ñ—Ç—å –≤—Å—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–∞—Å–∏–≤—É. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤; –Ω–µ –∑–º—ñ–Ω—é–π—Ç–µ –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤.
// –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ JavaScript: false, null, 0, "", undefined —Ç–∞ NaN.
// –ü—ñ–¥–∫–∞–∑–∫–∞: —Å–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–∂–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —É –±—É–ª–µ–≤–µ.
// function bouncer(arr) {
//   let newArr = [];
//   for(let i=0; i< arr.length; i++) {
//     if(arr[i]) {
//        newArr.push(arr[i])
//     }
//   }
//   return newArr;
// }
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// function bouncer(arr) {
//   return arr.filter(Boolean);  // —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –≤ —è–∫–æ–º—É –≤–∫–ª—é—á–µ–Ω—ñ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ arr, —è–∫—ñ —î "—ñ—Å—Ç–∏–Ω–Ω–∏–º–∏" –∑–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω—å –≤ JavaScript.
// }
// console.log(bouncer([7, "ate", "", false, 9])); // [7, "ate", 9]

// 1Ô∏è‚É£1Ô∏è‚É£–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –Ω–∞–π–º–µ–Ω—à–∏–π —ñ–Ω–¥–µ–∫—Å, –ø—Ä–∏ —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è (–¥—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç) 
// –≤ –º–∞—Å–∏–≤ (–ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç), –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤—ñ–Ω –±—É–≤ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π. –ü–æ–≤–µ—Ä–Ω–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –ø–æ–≤–∏–Ω–Ω–µ 
// –±—É—Ç–∏ —á–∏—Å–ª–æ.
// –ù–∞–ø—Ä–∏–∫–ª–∞–¥, getIndexToIns([20,3,5], 19) –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ 2, –æ—Å–∫—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –≤—ñ–Ω –≤–∏–≥–ª—è–¥–∞—Ç–∏–º–µ —è–∫ [3,5,20], 
// –∞ 19 –º–µ–Ω—à–µ –∑–∞ 20 (—ñ–Ω–¥–µ–∫—Å 2) —Ç–∞ –±—ñ–ª—å—à–µ –∑–∞ 5 (—ñ–Ω–¥–µ–∫—Å 1).
// function getIndexToIns(arr, num) {
//   arr.sort((a, b) => a - b);
//   for (let i = 0; i < arr.length; i++) {
//     if (arr[i] >= num) return i;
//   }
//   return arr.length;
// }
// --------------------------------------------------------------------------------------------------------------------
// function getIndexToIns(arr, num) {
//   return arr.filter(val => num > val).length;
// }
// --------------------------------------------------------------------------------------------------------------------
// function getIndexToIns(arr, num) {
//   return arr
//     .concat(num)
//     .sort((a, b) => a - b)
//     .indexOf(num);
// }
// console.log(getIndexToIns([40, 60], 50)); // 1

// 1Ô∏è‚É£2Ô∏è‚É£–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å true, —è–∫—â–æ —Ä—è–¥–æ–∫ —É –ø–µ—Ä—à–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ –º–∞—Å–∏–≤—É –º—ñ—Å—Ç–∏—Ç—å —É—Å—ñ –ª—ñ—Ç–µ—Ä–∏ —Ä—è–¥–∫–∞ —É 
// –¥—Ä—É–≥–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ –º–∞—Å–∏–≤—É.
// –ù–∞–ø—Ä–∏–∫–ª–∞–¥, ["hello", "Hello"] –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ true, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—Å—ñ –ª—ñ—Ç–µ—Ä–∏ –¥—Ä—É–≥–æ–≥–æ —Ä—è–¥–∫–∞ –Ω–∞—è–≤–Ω—ñ 
// —É –ø–µ—Ä—à–æ–º—É, –Ω–µ–∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ —Ä–µ–≥—ñ—Å—Ç—Ä.
// function mutation(arr) {
//   const test = arr[1].toLowerCase();
//     const target = arr[0].toLowerCase();
//     for (let i = 0; i < test.length; i++) {
//       if (target.indexOf(test[i]) < 0) return false;
//     }
//     return true;
//   }
// --------------------------------------------------------------------------------------------
// function mutation(arr) {
//   return arr[1]
//     .toLowerCase()
//     .split("")
//     .every(function(letter) {
//       return arr[0].toLowerCase().indexOf(letter) !== -1;
//     });
// }
// console.log(mutation(["hello", "hey"])); // false

// 1Ô∏è‚É£3Ô∏è‚É£–ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –¥—ñ–ª–∏—Ç—å –º–∞—Å–∏–≤ (–ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç) –Ω–∞ –≥—Ä—É–ø–∏ –¥–æ–≤–∂–∏–Ω–æ—é size 
// (–¥—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç) —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö —è–∫ –¥–≤–æ–≤–∏–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤.
// function chunkArrayInGroups(arr, size) {
//   const newArr = [];
//   for (let i = 0; i < arr.length; i += size) {
//     newArr.push(arr.slice(i, i + size));
//   }
//   return newArr;
// }
// ------------------------------------------------------------------------------------
// function chunkArrayInGroups(arr, size) {
//   const newArr = [];
//   while (arr.length > 0) {
//     newArr.push(arr.splice(0, size));
//   }
//   return newArr;
// }
// console.log(chunkArrayInGroups(["a", "b", "c", "d"], 2));   // [["a", "b"], ["c", "d"]]

// ‚ùó‚ùó‚ùó–û–±'—î–∫—Ç–Ω–æ–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è (–û–û–ü)
// 1Ô∏è‚É£–ü–æ–≤—Ç–æ—Ä–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–¥—É –∑ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º this
// let duck = {
//   name: "Aflac",
//   numLegs: 2,
//   sayName: function() {return "The name of this duck is " + this.name + ".";}
// };

// 2Ô∏è‚É£–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
// –û—Å—å –ø—Ä–∏–∫–ª–∞–¥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:
// function Bird() {
//   this.name = "Albert";
//   this.color = "blue";
//   this.numLegs = 2;
// }

// 3Ô∏è‚É£–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±‚Äô—î–∫—Ç—ñ–≤
// function Bird() {
//   this.name = "Albert";
//   this.color  = "blue";
//   this.numLegs = 2;
// }
// let blueBird = new Bird();

// 4Ô∏è‚É£–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
// function Bird(name, color) {
//   this.name = name;
//   this.color = color;
//   this.numLegs = 2;
// }

// 5Ô∏è‚É£–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –æ–±‚Äô—î–∫—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é instanceof
// let Bird = function(name, color) {
//   this.name = name;
//   this.color = color;
//   this.numLegs = 2;
// }
// let crow = new Bird("Alexis", "black");
// crow instanceof Bird;

// 6Ô∏è‚É£–î–æ–¥–∞–π—Ç–µ –≤–ª–∞—Å–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ canary –¥–æ –º–∞—Å–∏–≤—É ownProps.
// function Bird(name) {
//   this.name = name;
//   this.numLegs = 2;
// }
// let canary = new Bird("Tweety");
// let ownProps = [];
// for (let property in canary) {
//   if (canary.hasOwnProperty(property)) {
//     ownProps.push(property);
//   }
// }

// 7Ô∏è‚É£–Ü—Ç–µ—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ —É—Å—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
// function Bird(name) {
//   this.name = name;  //own property
// }
// Bird.prototype.numLegs = 2; // prototype property
// let duck = new Bird("Donald");
// // –û—Å—å —Ç–∞–∫ –≤–∏ –¥–æ–¥–∞—î—Ç–µ –≤–ª–∞—Å–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ duck –¥–æ –º–∞—Å–∏–≤—É ownProps —ñ 
// // –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ prototype –¥–æ –º–∞—Å–∏–≤—É prototypeProps:
// let ownProps = [];
// let prototypeProps = [];
// for (let property in duck) {
//   if(duck.hasOwnProperty(property)) {
//     ownProps.push(property);
//   } else {
//     prototypeProps.push(property);
//   }
// }
// console.log(ownProps); // ["name"]
// console.log(prototypeProps); // ["numLegs"]

// 8Ô∏è‚É£–í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é joinDogFraternity, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä candidate —Ç–∞, 
// –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å constructor, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å true, —è–∫—â–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º 
// —î Dog, –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å false.
// function Dog(name) {
//   this.name = name;
// }
// function joinDogFraternity(candidate) {
// if (candidate.constructor === Dog) {
//     return true;
//   } else {
//     return false;
//   }
// }
// console.log(joinDogFraternity(Dog)); // false

// 9Ô∏è‚É£–ó–º—ñ–Ω–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –Ω–∞ –Ω–æ–≤–∏–π –æ–±‚Äô—î–∫—Ç
// –î–æ–¥–∞–π—Ç–µ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å numLegs —ñ –¥–≤–∞ –º–µ—Ç–æ–¥–∏ (eat() –π describe()) –¥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø—É Dog, 
// –≤—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏ prototype –Ω–∞ –Ω–æ–≤–∏–π –æ–±‚Äô—î–∫—Ç.
// function Dog(name) {
//   this.name = name;
// }
// Dog.prototype = {
// numLegs: 4, 
//   eat: function() {
//     console.log("nom nom nom");
//   },
//   describe: function() {
//     console.log("My name is " + this.name);
//   }
// };

// üîü–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø—ñ–¥ —á–∞—Å –∑–º—ñ–Ω–∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø—É
// –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–ª–∞—Å–Ω–æ—Ä—É—á –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å constructor –ø—ñ–¥ —á–∞—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ç–æ—Ç–∏–ø—É
// function Dog(name) {
//   this.name = name;
// }
// Dog.prototype = {
//  constructor: Dog,
//   numLegs: 4,
//   eat: function() {
//     console.log("nom nom nom");
//   },
//   describe: function() {
//     console.log("My name is " + this.name);
//   }
// };

// 1Ô∏è‚É£1Ô∏è‚É£–ü—Ä–æ—Ç–æ—Ç–∏–ø –æ–±‚Äô—î–∫—Ç–∞
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ isPrototypeOf, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ beagle prototype.
// function Dog(name) {
//   this.name = name;
// }
// let beagle = new Dog("Snoopy");
// Dog.prototype.isPrototypeOf(beagle); // true

// 1Ô∏è‚É£2Ô∏è‚É£–õ–∞–Ω—Ü—é–≥ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ–≤
// function Dog(name) {
//   this.name = name;
// }
// let beagle = new Dog("Snoopy");
// Dog.prototype.isPrototypeOf(beagle);  // –ø–æ–∫–∞–∑—É—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ
// Object.prototype.isPrototypeOf(Dog.prototype);

// 1Ô∏è‚É£3Ô∏è‚É£–£—Å–ø–∞–¥–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –≤—ñ–¥ —Å—É–ø–µ—Ä—Ç–∏–ø—É
// function Animal() { }
// Animal.prototype = {
//   constructor: Animal,
//   eat: function() {
//     console.log("nom nom nom");
//   }
// };
// let duck = Object.create(Animal.prototype); 
// let beagle = Object.create(Animal.prototype); 

// 1Ô∏è‚É£4Ô∏è‚É£–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ç–æ—Ç–∏–ø—É –¥–æ—á—ñ—Ä–Ω—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
// –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥, —â–æ–± –µ–∫–∑–µ–º–ø–ª—è—Ä–∏ Dog —É—Å–ø–∞–¥–∫–æ–≤—É–≤–∞–ª–∏ –≤—ñ–¥ Animal.
// function Animal() { }
// Animal.prototype = {
//   constructor: Animal,
//   eat: function() {
//     console.log("nom nom nom");
//   }
// };
// function Dog() { }
// Dog.prototype = Object.create(Animal.prototype);
// let beagle = new Dog();
// beagle.eat(); // nom nom nom

// 1Ô∏è‚É£5Ô∏è‚É£–°–∫–∏–¥–∞–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —É—Å–ø–∞–¥–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
// –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–¥, —â–æ–± duck.constructor —Ç–∞ beagle.constructor –ø–æ–≤–µ—Ä–Ω—É–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏.
// function Animal() { }
// function Bird() { }
// function Dog() { }
// Bird.prototype = Object.create(Animal.prototype);
// Dog.prototype = Object.create(Animal.prototype);
// let duck = new Bird();
// let beagle = new Dog();
// // ----------------------------------------------
// Bird.prototype.constructor = Bird;
// duck.constructor;
// Dog.prototype.constructor = Dog;
// beagle.constructor

// 1Ô∏è‚É£6Ô∏è‚É£–î–æ–¥–∞–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ –ø—ñ—Å–ª—è —É—Å–ø–∞–¥–∫—É–≤–∞–Ω–Ω—è
// function Animal() { }
// Animal.prototype.eat = function() { console.log("nom nom nom"); };
// function Dog() { }
// Dog.prototype = Object.create(Animal.prototype);
// Dog.prototype.constructor = Dog;
// Dog.prototype.bark = function() {
//   console.log("Woof!");
// };
// let beagle = new Dog();
// beagle.eat(); // nom nom nom
// beagle.bark(); // Woof!

// 1Ô∏è‚É£7Ô∏è‚É£–ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —É—Å–ø–∞–¥–∫–æ–≤–∞–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
// –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á—Ç–µ –º–µ—Ç–æ–¥ fly() –¥–ª—è Penguin, —â–æ–± –≤—ñ–Ω –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä—è–¥–æ–∫ Alas, this is a flightless bird.
// function Bird() { }
// Bird.prototype.fly = function() { return "I am flying!"; };
// function Penguin() { }
// Penguin.prototype = Object.create(Bird.prototype);
// Penguin.prototype.constructor = Penguin;
// // ----------------------------------------------------------
// Penguin.prototype.fly = function() {
//   return "Alas, this is a flightless bird.";
// };
// // -----------------------------------------------------------
// let penguin = new Penguin();
// console.log(penguin.fly()); // Alas, this is a flightless bird.

// 1Ô∏è‚É£8Ô∏è‚É£–ú—ñ–∫—Å–∏–Ω–∏, —â–æ–± –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–ø—ñ–ª—å–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É –º—ñ–∂ –Ω–µ–ø–æ–≤‚Äô—è–∑–∞–Ω–∏–º–∏ –æ–±‚Äô—î–∫—Ç–∞–º–∏
// –°—Ç–≤–æ—Ä—ñ—Ç—å –º—ñ–∫—Å–∏–Ω –ø—ñ–¥ –Ω–∞–∑–≤–æ—é glideMixin, —è–∫–∏–π –≤–∏–∑–Ω–∞—á–∞—î –º–µ—Ç–æ–¥ –ø—ñ–¥ –Ω–∞–∑–≤–æ—é glide. 
// –ü–æ—Ç—ñ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ glideMixin, —â–æ–± –Ω–∞–¥–∞—Ç–∏ bird —Ç–∞ boat –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–ª–∞–≤–Ω–æ —Ä—É—Ö–∞—Ç–∏—Å—å.
// let bird = {
//   name: "Donald",
//   numLegs: 2
// };
// let boat = {
//   name: "Warrior",
//   type: "race-boat"
// };
// // ---------------------------------
// let glideMixin = function(obj) {
//   obj.glide = function() {
//     console.log("glide");
//   }
// };
// glideMixin(bird);
// glideMixin(boat);

// 1Ô∏è‚É£9Ô∏è‚É£–ó–∞–º–∏–∫–∞–Ω–Ω—è, —â–æ–± –∑–∞—Ö–∏—Å—Ç–∏—Ç–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –æ–±‚Äô—î–∫—Ç–∞ –≤—ñ–¥ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∑–º—ñ–Ω
// –ó–º—ñ–Ω—ñ—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è weight —É —Ñ—É–Ω–∫—Ü—ñ—ó Bird, —â–æ–± –≤–æ–Ω–∞ —Å—Ç–∞–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—é –∑–º—ñ–Ω–Ω–æ—é. 
// –ü–æ—Ç—ñ–º —Å—Ç–≤–æ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ getWeight, —è–∫–∏–π –ø–æ–≤–µ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è weight 15.
// function Bird() {
//   let weight = 15;
//     this.getWeight = function() { 
//       return weight;
//     };
// }

// 2Ô∏è‚É£0Ô∏è‚É£–í–∏—Ä–∞–∑ –Ω–µ–≥–∞–π–Ω–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó (IIFE)
// –ü–µ—Ä–µ–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é makeNest —Ç–∞ –≤–∏–¥–∞–ª—ñ—Ç—å –≤–∏–∫–ª–∏–∫, —â–æ–± —Ü–µ –±—É–≤ –∞–Ω–æ–Ω—ñ–º–Ω–∏–π 
// –≤–∏—Ä–∞–∑ –Ω–µ–≥–∞–π–Ω–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó (IIFE).
// function makeNest() {
//   console.log("A cozy nest is ready");
// }
// makeNest();
// // -------------------------------------
// (function () {
//   console.log("A cozy nest is ready");
// }) (); // A cozy nest is ready

// 2Ô∏è‚É£1Ô∏è‚É£IIFE –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥—É–ª—è
// –°—Ç–≤–æ—Ä—ñ—Ç—å –º–æ–¥—É–ª—å –ø—ñ–¥ –Ω–∞–∑–≤–æ—é funModule, —â–æ–± –∑–∞–≥–æ—Ä–Ω—É—Ç–∏ –¥–≤–∞ –º—ñ–∫—Å–∏–Ω–∏ (isCuteMixin —Ç–∞ singMixin). 
// funModule –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –æ–±‚Äô—î–∫—Ç.
// let isCuteMixin = function(obj) {
//   obj.isCute = function() {
//     return true;
//   };
// };
// let singMixin = function(obj) {
//   obj.sing = function() {
//     console.log("Singing to an awesome tune");
//   };
// };
// // -------------------------------------------
// let funModule = (function () {
//   return {
//     isCuteMixin: function(obj) {
//       obj.isCute = function() {
//         return true;
//       };
//     },
//     singMixin: function(obj) {
//       obj.sing = function() {
//         console.log("Singing to an awesome tune");
//       };
//     }
//   }
// })();

// ‚ùó‚ùó‚ùó–§—É–Ω–∫—Ü—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
// –§—É–Ω–∫—Ü—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è ‚Äî —Ü–µ —Å—Ç–∏–ª—å –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, —É —è–∫–æ–º—É —Ä—ñ—à–µ–Ω–Ω—è —î –ø—Ä–æ—Å—Ç–∏–º–∏ —ñ–∑–æ–ª—å–æ–≤–∞–Ω–∏–º–∏ 
// —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–µ–∑ –±—É–¥—å-—è–∫–∏—Ö –ø–æ–±—ñ—á–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤, —è–∫—ñ –≤–∏—Ö–æ–¥—è—Ç—å –∑–∞ –º–µ–∂—ñ –æ–±–ª–∞—Å—Ç—ñ –¥—ñ—ó 
// —Ñ—É–Ω–∫—Ü—ñ—ó: INPUT -> PROCESS -> OUTPUT
// 1Ô∏è‚É£–§—É–Ω–∫—Ü—ñ—ó prepareTea —Ç–∞ getTea –≤–∂–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ —É —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ –∫–æ–¥—É. –í–∏–∫–ª–∏—á—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é getTea, 
// —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ 40 —á–∞—à–æ–∫ —á–∞—é –¥–ª—è –∫–æ–º–∞–Ω–¥–∏, —ñ –∑–±–µ—Ä–µ–∂—ñ—Ç—å —ó—Ö —É –∑–º—ñ–Ω–Ω—ñ–π tea4TeamFCC.
// –§—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫, —è–∫–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —á–∞—à–∫—É –∑–µ–ª–µ–Ω–æ–≥–æ —á–∞—é
// const prepareTea = () => 'greenTea';
// /*
// –ë–µ—Ä—É—á–∏ –¥–æ —É–≤–∞–≥–∏ —Ñ—É–Ω–∫—Ü—ñ—é (—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç–∏–ø—É —á–∞—é) —Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—à–æ–∫, –Ω–∞—Å—Ç—É–ø–Ω–∞ 
// —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ (–∫–æ–∂–µ–Ω –ø–æ–∑–Ω–∞—á–∞—î —á–∞—à–∫—É —ñ–∑ –ø–µ–≤–Ω–∏–º –≤–∏–¥–æ–º —á–∞—é).
// */
// const getTea = (numOfCups) => {
//   const teaCups = [];
//   for(let cups = 1; cups <= numOfCups; cups += 1) {
//     const teaCup = prepareTea();
//     teaCups.push(teaCup);
//   }
//   return teaCups;
// };
// // --------------------------------------------------
// const tea4TeamFCC = getTea(40); 
// console.log(tea4TeamFCC);

// 2Ô∏è‚É£–ü–µ—Ä–µ–¥–∞—á–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —É —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é incrementer —Ç–∞–∫, —â–æ–± –≤–æ–Ω–∞ –ø—Ä–∏–π–º–∞–ª–∞ –∞—Ä–≥—É–º–µ–Ω—Ç, –∞ –ø–æ—Ç—ñ–º 
// –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –∑–Ω–∞—á–µ–Ω–Ω—è, –∑–±—ñ–ª—å—à–µ–Ω–µ –Ω–∞ –æ–¥–∏–Ω.
// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞
// let fixedValue = 4;
// function incrementer(fixedValue) {
// return fixedValue +1;
// }

// 3Ô∏è‚É£–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –ø–æ–∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
// –ü–µ—Ä–µ–ø–∏—à—ñ—Ç—å –∫–æ–¥ —Ç–∞–∫, —â–æ–± –≥–ª–æ–±–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤ bookList –Ω–µ –∑–º—ñ–Ω—é–≤–∞–≤—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∂–æ–¥–Ω–æ—ó 
// –∑ —Ñ—É–Ω–∫—Ü—ñ–π. –§—É–Ω–∫—Ü—ñ—è add –ø–æ–≤–∏–Ω–Ω–∞ –¥–æ–¥–∞—Ç–∏ –Ω–∞–¥–∞–Ω–∏–π bookName –≤ –∫—ñ–Ω–µ—Ü—å –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ –º–∞—Å–∏–≤—É 
// —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ (—Å–ø–∏—Å–æ–∫). –§—É–Ω–∫—Ü—ñ—è remove –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–¥–∞–Ω–∏–π bookName 
// –∑ –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ –º–∞—Å–∏–≤—É.
// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞
// const bookList = ["The Hound of the Baskervilles", 
//                   "On The Electrodynamics of Moving Bodies", 
//                   "Philosophi√¶ Naturalis Principia Mathematica", 
//                   "Disquisitiones Arithmeticae"];
// // --------------------------------------------------------------
// function add(arr, bookName) {
// let newArr = [...arr]; 
//   newArr.push(bookName); 
//   return newArr;
// }
// // ---------------------------------------------------------------
// function remove(arr, bookName) {
// let newArr = [...arr];
// if (newArr.indexOf(bookName) >= 0) {
//     newArr.splice(newArr.indexOf(bookName), 1);
//     return newArr; 
// }
// }
// ------------------------------------------------------------------
// function add(list, bookName) {
//   return [...list, bookName];
// }
// //  ------------------------------------------------------------------
// function remove(list, bookName) {
//   return list.filter(book => book !== bookName);
// }
// console.log(add(bookList, "A Brief History of Time")); // ["The Hound of the Baskervilles", "On The Electrodynamics of Moving Bodies", "Philosophi√¶ Naturalis Principia Mathematica", "Disquisitiones Arithmeticae", "A Brief History of Time"]
// console.log(bookList); // –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—å

// 4Ô∏è‚É£–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É map –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –º–∞—Å–∏–≤—É
// const watchList = [
//   {
//     "Title": "Inception",
//     "Year": "2010",
//     "Rated": "PG-13",
//     "Released": "16 Jul 2010",
//     "Runtime": "148 min",
//     "Genre": "Action, Adventure, Crime",
//     "Director": "Christopher Nolan",
//     "Writer": "Christopher Nolan",
//     "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
//     "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
//     "Language": "English, Japanese, French",
//     "Country": "USA, UK",
//     "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
//     "Metascore": "74",
//     "imdbRating": "8.8",
//     "imdbVotes": "1,446,708",
//     "imdbID": "tt1375666",
//     "Type": "movie",
//     "Response": "True"
//   },
//   {
//     "Title": "Interstellar",
//     "Year": "2014",
//     "Rated": "PG-13",
//     "Released": "07 Nov 2014",
//     "Runtime": "169 min",
//     "Genre": "Adventure, Drama, Sci-Fi",
//     "Director": "Christopher Nolan",
//     "Writer": "Jonathan Nolan, Christopher Nolan",
//     "Actors": "Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow",
//     "Plot": "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
//     "Language": "English",
//     "Country": "USA, UK",
//     "Awards": "Won 1 Oscar. Another 39 wins & 132 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg",
//     "Metascore": "74",
//     "imdbRating": "8.6",
//     "imdbVotes": "910,366",
//     "imdbID": "tt0816692",
//     "Type": "movie",
//     "Response": "True"
//   },
//   {
//     "Title": "The Dark Knight",
//     "Year": "2008",
//     "Rated": "PG-13",
//     "Released": "18 Jul 2008",
//     "Runtime": "152 min",
//     "Genre": "Action, Adventure, Crime",
//     "Director": "Christopher Nolan",
//     "Writer": "Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)",
//     "Actors": "Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine",
//     "Plot": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.",
//     "Language": "English, Mandarin",
//     "Country": "USA, UK",
//     "Awards": "Won 2 Oscars. Another 146 wins & 142 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg",
//     "Metascore": "82",
//     "imdbRating": "9.0",
//     "imdbVotes": "1,652,832",
//     "imdbID": "tt0468569",
//     "Type": "movie",
//     "Response": "True"
//   },
//   {
//     "Title": "Batman Begins",
//     "Year": "2005",
//     "Rated": "PG-13",
//     "Released": "15 Jun 2005",
//     "Runtime": "140 min",
//     "Genre": "Action, Adventure",
//     "Director": "Christopher Nolan",
//     "Writer": "Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)",
//     "Actors": "Christian Bale, Michael Caine, Liam Neeson, Katie Holmes",
//     "Plot": "After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.",
//     "Language": "English, Urdu, Mandarin",
//     "Country": "USA, UK",
//     "Awards": "Nominated for 1 Oscar. Another 15 wins & 66 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg",
//     "Metascore": "70",
//     "imdbRating": "8.3",
//     "imdbVotes": "972,584",
//     "imdbID": "tt0372784",
//     "Type": "movie",
//     "Response": "True"
//   },
//   {
//     "Title": "Avatar",
//     "Year": "2009",
//     "Rated": "PG-13",
//     "Released": "18 Dec 2009",
//     "Runtime": "162 min",
//     "Genre": "Action, Adventure, Fantasy",
//     "Director": "James Cameron",
//     "Writer": "James Cameron",
//     "Actors": "Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang",
//     "Plot": "A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.",
//     "Language": "English, Spanish",
//     "Country": "USA, UK",
//     "Awards": "Won 3 Oscars. Another 80 wins & 121 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg",
//     "Metascore": "83",
//     "imdbRating": "7.9",
//     "imdbVotes": "876,575",
//     "imdbID": "tt0499549",
//     "Type": "movie",
//     "Response": "True"
//   }
// ];
// // const ratings = watchList.map(({ Title: title, imdbRating: rating }) => ({title, rating}));
// // -----------------------------------------------------------------------------------------
// const ratings = watchList.map(item => ({
//   title: item["Title"],
//   rating: item["imdbRating"]
// }));
// console.log(JSON.stringify(ratings));

// 5Ô∏è‚É£–Ü–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—è map –Ω–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ
// –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π Array.prototype.myMap(), —è–∫–∏–π –ø–æ–≤–æ–¥–∏—Ç—å—Å—è —è–∫ Array.prototype.map(). –í–∏ –Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ 
// –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤–±—É–¥–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥ map. –î–æ—Å—Ç—É–ø –¥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ Array –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —É –º–µ—Ç–æ–¥—ñ myMap 
// –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é this.
// Array.prototype.myMap = function(callback) {
//   const newArray = [];
//   for(let i = 0; i < this.length; i++) {
//     newArray.push(callback(this[i], i, this))
//   }
//   return newArray;
// };
// // ---------------------------------------2------------------------------------------------------
// Array.prototype.myMap = function (callback) {
//   const newArray = [];
//   this.forEach((element, index, originalArr) =>
//     newArray.push(callback(element, index, originalArr))
//   );
//   return newArray;
// };

// 6Ô∏è‚É£–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É filter –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –º–∞—Å–∏–≤—É
// –ó–º—ñ–Ω–Ω–∞ watchList –º—ñ—Å—Ç–∏—Ç—å –º–∞—Å–∏–≤ –æ–±‚Äô—î–∫—Ç—ñ–≤ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–µ–∫—ñ–ª—å–∫–∞ —Ñ—ñ–ª—å–º—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ 
// –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é filter —Ç–∞ map –Ω–∞ watchList, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –æ–±‚Äô—î–∫—Ç—ñ–≤ —ñ–∑ –∫–ª—é—á–∞–º–∏ title 
// —Ç–∞ rating. –ù–æ–≤–∏–π –º–∞—Å–∏–≤ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ —Ç—ñ –æ–±‚Äô—î–∫—Ç–∏, –¥–µ imdbRating –±—ñ–ª—å—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î 8.0.
//  –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è rating –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –æ–±‚Äô—î–∫—Ç—ñ —è–∫ —Ä—è–¥–∫–∏ —ñ, –º–æ–∂–ª–∏–≤–æ, –≤–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è 
//  –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —ó—Ö —É —á–∏—Å–ª–∞, —â–æ–± –≤–∏–∫–æ–Ω–∞—Ç–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó.
// const watchList = [
//   {
//     "Title": "Inception",
//     "Year": "2010",
//     "Rated": "PG-13",
//     "Released": "16 Jul 2010",
//     "Runtime": "148 min",
//     "Genre": "Action, Adventure, Crime",
//     "Director": "Christopher Nolan",
//     "Writer": "Christopher Nolan",
//     "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
//     "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
//     "Language": "English, Japanese, French",
//     "Country": "USA, UK",
//     "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
//     "Metascore": "74",
//     "imdbRating": "8.8",
//     "imdbVotes": "1,446,708",
//     "imdbID": "tt1375666",
//     "Type": "movie",
//     "Response": "True"
//   },
//   {
//     "Title": "Interstellar",
//     "Year": "2014",
//     "Rated": "PG-13",
//     "Released": "07 Nov 2014",
//     "Runtime": "169 min",
//     "Genre": "Adventure, Drama, Sci-Fi",
//     "Director": "Christopher Nolan",
//     "Writer": "Jonathan Nolan, Christopher Nolan",
//     "Actors": "Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow",
//     "Plot": "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
//     "Language": "English",
//     "Country": "USA, UK",
//     "Awards": "Won 1 Oscar. Another 39 wins & 132 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg",
//     "Metascore": "74",
//     "imdbRating": "8.6",
//     "imdbVotes": "910,366",
//     "imdbID": "tt0816692",
//     "Type": "movie",
//     "Response": "True"
//   },
//   {
//     "Title": "The Dark Knight",
//     "Year": "2008",
//     "Rated": "PG-13",
//     "Released": "18 Jul 2008",
//     "Runtime": "152 min",
//     "Genre": "Action, Adventure, Crime",
//     "Director": "Christopher Nolan",
//     "Writer": "Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)",
//     "Actors": "Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine",
//     "Plot": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.",
//     "Language": "English, Mandarin",
//     "Country": "USA, UK",
//     "Awards": "Won 2 Oscars. Another 146 wins & 142 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg",
//     "Metascore": "82",
//     "imdbRating": "9.0",
//     "imdbVotes": "1,652,832",
//     "imdbID": "tt0468569",
//     "Type": "movie",
//     "Response": "True"
//   },
//   {
//     "Title": "Batman Begins",
//     "Year": "2005",
//     "Rated": "PG-13",
//     "Released": "15 Jun 2005",
//     "Runtime": "140 min",
//     "Genre": "Action, Adventure",
//     "Director": "Christopher Nolan",
//     "Writer": "Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)",
//     "Actors": "Christian Bale, Michael Caine, Liam Neeson, Katie Holmes",
//     "Plot": "After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.",
//     "Language": "English, Urdu, Mandarin",
//     "Country": "USA, UK",
//     "Awards": "Nominated for 1 Oscar. Another 15 wins & 66 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg",
//     "Metascore": "70",
//     "imdbRating": "8.3",
//     "imdbVotes": "972,584",
//     "imdbID": "tt0372784",
//     "Type": "movie",
//     "Response": "True"
//   },
//   {
//     "Title": "Avatar",
//     "Year": "2009",
//     "Rated": "PG-13",
//     "Released": "18 Dec 2009",
//     "Runtime": "162 min",
//     "Genre": "Action, Adventure, Fantasy",
//     "Director": "James Cameron",
//     "Writer": "James Cameron",
//     "Actors": "Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang",
//     "Plot": "A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.",
//     "Language": "English, Spanish",
//     "Country": "USA, UK",
//     "Awards": "Won 3 Oscars. Another 80 wins & 121 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg",
//     "Metascore": "83",
//     "imdbRating": "7.9",
//     "imdbVotes": "876,575",
//     "imdbID": "tt0499549",
//     "Type": "movie",
//     "Response": "True"
//   }
// ];
// const filteredList = watchList
//   .filter(movie => {
//     return parseFloat(movie.imdbRating) >= 8.0;
//   })
//   .map(movie => {
//     return {
//       title: movie.Title,
//       rating: movie.imdbRating
//     };
//   });
// // ----------- 2 -------------------------------
// const filteredList = watchList
//   .filter(movie => movie.imdbRating >= 8.0)
//   .map(movie => ({ title: movie["Title"], rating: movie["imdbRating"] }));
// // ------------3--------------------------------
// const filteredList = watchList
//   .filter(({ imdbRating }) => imdbRating >= 8.0)
//   .map(({ Title: title, imdbRating: rating }) => ({ title, rating }));
// console.log(filteredList); // [ { title: 'Inception', rating: '8.8' },
//                              // { title: 'Interstellar', rating: '8.6' },
//                              // { title: 'The Dark Knight', rating: '9.0' },
//                              // { title: 'Batman Begins', rating: '8.3' } ]

// 7Ô∏è‚É£–Ü–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—è –º–µ—Ç–æ–¥—É filter –Ω–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ
// Array.prototype.myFilter = function(callback) {
//   const newArray = [];
//   for(let i = 0; i < this.length; i++) {
//     if (Boolean(callback(this[i], i, this)) === true) {
//       newArray.push(this[i]);
//     }
//   }
//   return newArray;
// }
// // -------------------2---------------------------------
// Array.prototype.myFilter = function (callback) {
//   const newArray = [];
//   for (let i = 0; i < this.length; i++) {
//     if (callback(this[i], i, this) == true) {
//       newArray.push(this[i]);
//     }
//   }
//   return newArray;
// };

// 8Ô∏è‚É£–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∏ –º–∞—Å–∏–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É slice
// function sliceArray(anim, beginSlice, endSlice) {
// return anim.slice(beginSlice, endSlice);
// }
// const inputAnim = ["Cat", "Dog", "Tiger", "Zebra", "Ant"];
// sliceArray(inputAnim, 1, 3); // ["Dog", "Tiger"]

// 9Ô∏è‚É£–í–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ –º–∞—Å–∏–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é slice –∑–∞–º—ñ—Å—Ç—å splice
// –º–µ—Ç–æ–¥ slice –Ω–µ –∑–º—ñ–Ω—é—î –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤, –∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π, —è–∫–∏–π –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ —è–∫ –∑–º—ñ–Ω–Ω—É.
// –º–µ—Ç–æ–¥ splice –∑–º—ñ–Ω—é—î –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤, —É —è–∫–æ–º—É –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è. 
// function nonMutatingSplice(cities) {
//   return cities.splice(0, 3);
// }
// console.log(nonMutatingSplice(["Chicago", "Delhi", "Islamabad", "London", "Berlin"])); // ["Chicago", "Delhi", "Islamabad"].

// üîü–û–±‚Äô—î–¥–Ω–∞–Ω–Ω—è –¥–≤–æ—Ö –º–∞—Å–∏–≤—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É concat
// function nonMutatingConcat(original, attach) {
// return original.concat(attach);
// }
// const first = [1, 2, 3];
// const second = [4, 5];
// nonMutatingConcat(first, second); // [1, 2, 3, 4, 5, 6]

// 1Ô∏è‚É£1Ô∏è‚É£–î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é concat –∑–∞–º—ñ—Å—Ç—å push
// concat –Ω–∞–¥–∞—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É –±–µ–∑ –ø–æ–±—ñ—á–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤.
// push –¥–æ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ –∫—ñ–Ω–µ—Ü—å —Ç–æ–≥–æ –º–∞—Å–∏–≤—É, –≤ —è–∫–æ–º—É –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π, —Ç–∏–º —Å–∞–º–∏–º –∑–º—ñ–Ω—é—é—á–∏ –π–æ–≥–æ.
// function nonMutatingPush(original, newItem) {
//   return original.concat(newItem);
// }
// const first = [1, 2, 3];
// const second = [4, 5];
// nonMutatingPush(first, second); // [1, 2, 3, 4, 5, 6]

// 1Ô∏è‚É£2Ô∏è‚É£–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É reduce –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö
// const watchList = [
//   {
//     "Title": "Inception",
//     "Year": "2010",
//     "Rated": "PG-13",
//     "Released": "16 Jul 2010",
//     "Runtime": "148 min",
//     "Genre": "Action, Adventure, Crime",
//     "Director": "Christopher Nolan",
//     "Writer": "Christopher Nolan",
//     "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
//     "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
//     "Language": "English, Japanese, French",
//     "Country": "USA, UK",
//     "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
//     "Metascore": "74",
//     "imdbRating": "8.8",
//     "imdbVotes": "1,446,708",
//     "imdbID": "tt1375666",
//     "Type": "movie",
//     "Response": "True"
//   },
//   {
//     "Title": "Interstellar",
//     "Year": "2014",
//     "Rated": "PG-13",
//     "Released": "07 Nov 2014",
//     "Runtime": "169 min",
//     "Genre": "Adventure, Drama, Sci-Fi",
//     "Director": "Christopher Nolan",
//     "Writer": "Jonathan Nolan, Christopher Nolan",
//     "Actors": "Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow",
//     "Plot": "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
//     "Language": "English",
//     "Country": "USA, UK",
//     "Awards": "Won 1 Oscar. Another 39 wins & 132 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg",
//     "Metascore": "74",
//     "imdbRating": "8.6",
//     "imdbVotes": "910,366",
//     "imdbID": "tt0816692",
//     "Type": "movie",
//     "Response": "True"
//   },
//   {
//     "Title": "The Dark Knight",
//     "Year": "2008",
//     "Rated": "PG-13",
//     "Released": "18 Jul 2008",
//     "Runtime": "152 min",
//     "Genre": "Action, Adventure, Crime",
//     "Director": "Christopher Nolan",
//     "Writer": "Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)",
//     "Actors": "Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine",
//     "Plot": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.",
//     "Language": "English, Mandarin",
//     "Country": "USA, UK",
//     "Awards": "Won 2 Oscars. Another 146 wins & 142 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg",
//     "Metascore": "82",
//     "imdbRating": "9.0",
//     "imdbVotes": "1,652,832",
//     "imdbID": "tt0468569",
//     "Type": "movie",
//     "Response": "True"
//   },
//   {
//     "Title": "Batman Begins",
//     "Year": "2005",
//     "Rated": "PG-13",
//     "Released": "15 Jun 2005",
//     "Runtime": "140 min",
//     "Genre": "Action, Adventure",
//     "Director": "Christopher Nolan",
//     "Writer": "Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)",
//     "Actors": "Christian Bale, Michael Caine, Liam Neeson, Katie Holmes",
//     "Plot": "After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.",
//     "Language": "English, Urdu, Mandarin",
//     "Country": "USA, UK",
//     "Awards": "Nominated for 1 Oscar. Another 15 wins & 66 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg",
//     "Metascore": "70",
//     "imdbRating": "8.3",
//     "imdbVotes": "972,584",
//     "imdbID": "tt0372784",
//     "Type": "movie",
//     "Response": "True"
//   },
//   {
//     "Title": "Avatar",
//     "Year": "2009",
//     "Rated": "PG-13",
//     "Released": "18 Dec 2009",
//     "Runtime": "162 min",
//     "Genre": "Action, Adventure, Fantasy",
//     "Director": "James Cameron",
//     "Writer": "James Cameron",
//     "Actors": "Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang",
//     "Plot": "A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.",
//     "Language": "English, Spanish",
//     "Country": "USA, UK",
//     "Awards": "Won 3 Oscars. Another 80 wins & 121 nominations.",
//     "Poster": "http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg",
//     "Metascore": "83",
//     "imdbRating": "7.9",
//     "imdbVotes": "876,575",
//     "imdbID": "tt0499549",
//     "Type": "movie",
//     "Response": "True"
//   }
// ];
// // -----------------1----------------------------------------------------
// function getRating(watchList){
//   const averageRating = watchList
//     .filter(film => film.Director === "Christopher Nolan")
//     .map(film => Number(film.imdbRating))
//     .reduce((sumOfRatings, rating) => sumOfRatings + rating, 0) /
//   watchList.filter(film => film.Director === "Christopher Nolan").length;
//   return averageRating;
// }
// // -----------------2-----------------------------------------------------
// // function getRating(watchList) {
// //   const nolanData = watchList
// //     .reduce((data, { Director: director, imdbRating: rating }) => {
// //       if (director === 'Christopher Nolan') {
// //         data.count++;
// //         data.sum += Number(rating);
// //       }
// //       return data;
// //     }, { sum: 0, count: 0 });
// //   const averageRating = nolanData.sum / nolanData.count;
// //   return averageRating;
// // }
// console.log(getRating(watchList)); // 8.675

// 1Ô∏è‚É£3Ô∏è‚É£–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É (map, filter —Ç–∞ reduce) –¥–ª—è —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–¥–∞—á
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–∏ –ª–∏—à–µ —Ü—ñ–ª–∏—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∏—Ö —á–∏—Å–µ–ª (–¥–µ—Å—è—Ç–∫–æ–≤—ñ 
// —á–∏—Å–ª–∞ –Ω–µ —î —Ü—ñ–ª–∏–º–∏ —á–∏—Å–ª–∞–º–∏), –∫–æ–ª–∏ –¥–æ –Ω–µ—ó –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –º–∞—Å–∏–≤ –¥—ñ–π—Å–Ω–∏—Ö —á–∏—Å–µ–ª.
// const squareList = arr => {
// let newArr = arr.filter(num => (num > 0) && (Number.isInteger(num))).map(num => num*num)
//   return newArr;
// };
// const squaredIntegers = squareList([-3, 4.8, 5, 3, -3.2]);
// console.log(squaredIntegers); // [25, 9]

// 1Ô∏è‚É£4Ô∏è‚É£–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É sort
// function alphabeticalOrder(arr) {
//   // -------------1--------------------------
//   // return arr.sort(function(a, b) {
//   //   return a === b ? 0 : a < b ? -1 : 1;
//   // });
//   // --------------2-------------------------
//   return arr.sort((a, b) => a.localeCompare(b));
// }
// console.log(alphabeticalOrder(["a", "d", "c", "a", "z", "g"])); // ¬†['a', 'a', 'c', 'd', 'g', 'z']

// 1Ô∏è‚É£5Ô∏è‚É£–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ–≥–æ –º–∞—Å–∏–≤—É –±–µ–∑ –∑–º—ñ–Ω–∏ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –º–∞—Å–∏–≤—É
// sort –∑–º—ñ–Ω—é—î –ø–æ—Ä—è–¥–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É –≤–∏—Ö—ñ–¥–Ω–æ–º—É –º–∞—Å–∏–≤—ñ. –Ü–Ω—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –≤—ñ–Ω –∑–º—ñ–Ω—é—î –º–∞—Å–∏–≤.
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –º–µ—Ç–æ–¥ sort —É —Ñ—É–Ω–∫—Ü—ñ—ó nonMutatingSort, —â–æ–± –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É —É 
// –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —ñ –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—É globalArray.
// const globalArray = [5, 6, 3, 2, 9];
// function nonMutatingSort(arr) {
// return [].concat(arr).sort((a, b) => a-b);
// }
// console.log(nonMutatingSort(globalArray)); // [2, 3, 5, 6, 9]
// console.log(globalArray); // [5, 6, 3, 2, 9]

//1Ô∏è‚É£6Ô∏è‚É£–†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –Ω–∞ –º–∞—Å–∏–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É split
// function splitify(str) {
// return str.split(/\W/);
// }
// console.log(splitify("Hello World,I-am code")); // ['Hello', 'World', 'I', 'am', 'code']

// 1Ô∏è‚É£7Ô∏è‚É£–û–±‚Äô—î–¥–Ω–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –≤ —Ä—è–¥–æ–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É join
// function sentensify(str) {
// return str.split(/\W/).join(" ");
// }
// console.log(sentensify("May-the-force-be-with-you")); // "May the force be with you"


// 1Ô∏è‚É£8Ô∏è‚É£–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –Ω–∞ URL-—Å–ª–∞–≥–∏
// function urlSlug(title) {
//   return title
//     .trim()
//     .split(/\s+/)
//     .map(world => world.toLowerCase())
//     .join("-");
//   }
// // --------------------------2-------------------------------------------------
// // function urlSlug(title) {
// //   return title
// //     .toLowerCase()
// //     .trim()
// //     .split(/\s+/)
// //     .join("-");
// // }
// console.log(urlSlug("A Mind Needs Books Like A Sword Needs A Whetstone")); // a-mind-needs-books-like-a-sword-needs-a-whetstone

// 1Ô∏è‚É£9Ô∏è‚É£–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É every –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—è–º
// –ú–µ—Ç–æ–¥ every –ø—Ä–∞—Ü—é—î –∑ –º–∞—Å–∏–≤–∞–º–∏, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–µ–≤–Ω–∏–π —Ç–µ—Å—Ç. –í—ñ–Ω 
// –ø–æ–≤–µ—Ä—Ç–∞—î –±—É–ª–µ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è true, —è–∫—â–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—è–º –∞–±–æ false, —è–∫—â–æ –Ω–∞–≤–ø–∞–∫–∏.
// function checkPositive(arr) {
// return arr.every(num => num > 0);
// }
// console.log(checkPositive([1, 2, 3, -4, 5])); // false

// 2Ô∏è‚É£0Ô∏è‚É£–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É some –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±—É–¥—å-—è–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—è–º
// –ú–µ—Ç–æ–¥ some –ø—Ä–∞—Ü—é—î –∑ –º–∞—Å–∏–≤–∞–º–∏, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –±—É–¥—å-—è–∫–∏–π –µ–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–µ–≤–Ω–∏–π —Ç–µ—Å—Ç. –í—ñ–Ω 
// –ø–æ–≤–µ—Ä—Ç–∞—î –±—É–ª–µ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è true, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫—Ä–∏—Ç–µ—Ä—ñ—è–º –∞–±–æ false, —è–∫—â–æ –Ω–∞–≤–ø–∞–∫–∏.
// function checkPositive(arr) {
// return arr.some(num => num > 0);
// }
// console.log(checkPositive([1, 2, 3, -4, 5])); // true

// 2Ô∏è‚É£1Ô∏è‚É£–í—Å—Ç—É–ø –¥–æ –∫–∞—Ä—Ä—ñ–Ω–≥—É —Ç–∞ —á–∞—Å—Ç–∫–æ–≤–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è
// –ê—Ä–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó ‚Äî —Ü–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤. –ö–∞—Ä—Ä—ñ–Ω–≥–æ–º —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞–∑–∏–≤–∞—é—Ç—å –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è 
// —Ñ—É–Ω–∫—Ü—ñ—ó –∑ n-–Ω–æ—é –∞—Ä–Ω—ñ—Å—Ç—é —É n-–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ–π –∑ –∞—Ä–Ω—ñ—Å—Ç—é 1.
// –ö–∞—Ä—Ä—ñ–Ω–≥ –∫–æ—Ä–∏—Å–Ω–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–∏, —è–∫—â–æ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–¥–∞—Ç–∏ –≤—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–¥–Ω–æ—á–∞—Å–Ω–æ. 
// –í–∏ –º–æ–∂–µ—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–∂–µ–Ω –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó —É –∑–º—ñ–Ω–Ω—ñ–π, —â–æ –º–∞—Ç–∏–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç—É —Ñ—É–Ω–∫—Ü—ñ—é, 
// —è–∫–∞ –ø—Ä–∏–π–º–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç (—â–æ–π–Ω–æ –≤—ñ–Ω –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π).
// function add(x) {
// return function(y) {
//     return function(z) {
//       return x + y + z;
//     }
//   }
// }
// console.log(add(10)(20)(30)); // 60

// ‚ùó‚ùó‚ùó–ù–∞–ø–∏—Å–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
// 1Ô∏è‚É£–°—É–º–∞ –≤—Å—ñ—Ö —á–∏—Å–µ–ª –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ
// function sumAll(arr) {
//   let max = Math.max(arr[0], arr[1]);
//   let min = Math.min(arr[0], arr[1]);
//   let sumBetween = 0;
//   for (let i = min; i <= max; i++) {
//     sumBetween += i;
//   }
//    return sumBetween;
//  }
// --------------2----------------------------
// function sumAll(arr) {
//   let sumBetween = 0;
//   for (let i = Math.min(...arr); i <= Math.max(...arr); i++) {
//     sumBetween += i;
//   }
//   return sumBetween;
// }
//  console.log(sumAll([1, 4])); // 10

// 2Ô∏è‚É£–†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –¥–≤–æ–º–∞ –º–∞—Å–∏–≤–∞–º–∏
// function diffArray(arr1, arr2) {
//   const newArr = [];
//   function onlyInFirst(first, second) {
//     for (let i = 0; i < first.length; i++) {
//       if (second.indexOf(first[i]) === -1) {
//         newArr.push(first[i]);
//       }
//     }
//   }
//   onlyInFirst(arr1, arr2);
//   onlyInFirst(arr2, arr1);
//   return newArr;
// }
// ------------------------2--------------------------------------
// function diffArray(arr1, arr2) {
//   return arr1
//     .concat(arr2)
//     .filter(item => !arr1.includes(item) || !arr2.includes(item));
// }
// ------------------------3---------------------------------------
// function diffArray(arr1, arr2) {
//   return [...diff(arr1, arr2), ...diff(arr2, arr1)];
//   function diff(a, b) {
//     return a.filter(item => b.indexOf(item) === -1);
//   }
// }
// console.log(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5])); // [4]

// 3Ô∏è‚É£–ü–æ—à—É–∫ —Ç–∞ –∑–Ω–∏—â–µ–Ω–Ω—è
// –í–∞–º –±—É–¥–µ –Ω–∞–¥–∞–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —è–∫ –ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó destroyer, —è–∫–∏–π 
// —Å—É–ø—Ä–æ–≤–æ–¥–∂—É—î—Ç—å—Å—è –æ–¥–Ω–∏–º –∞–±–æ –±—ñ–ª—å—à–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏. –í–∏–¥–∞–ª—ñ—Ç—å –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É, 
// —è–∫—ñ –º–∞—é—Ç—å —Ç–∞–∫–µ –∂ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫ —Ü—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –§—É–Ω–∫—Ü—ñ—è –º–∞—î –ø—Ä–∏–π–º–∞—Ç–∏ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å 
// –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤; —Ç–∞–∫—É —Ñ—É–Ω–∫—Ü—ñ—é —á–∞—Å—Ç–æ –Ω–∞–∑–∏–≤–∞—é—Ç—å –≤–∞—Ä—ñ–∞–¥–∏—á–Ω–æ—é. –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö 
// –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, –¥–æ–¥–∞–≤—à–∏ –∑–∞–ª–∏—à–∫–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –æ–±‚Äô—î–∫—Ç arguments.
// function destroyer(arr, ...valsToRemove) {
//   return arr.filter(elem => !valsToRemove.includes(elem));
// }
// console.log(destroyer([1, 2, 3, 1, 2, 3], 2, 3)); // [1, 1]

// 4Ô∏è‚É£–î–µ –∂ —Ç–∏, –†–æ–º–µ–æ?
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–æ–≥–ª—è–¥–∞—î –º–∞—Å–∏–≤ –æ–±‚Äô—î–∫—Ç—ñ–≤ (–ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç) —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —É—Å—ñ—Ö –æ–±‚Äô—î–∫—Ç—ñ–≤, 
// —è–∫—ñ –º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—ñ –ø–∞—Ä–∏ —ñ–º–µ–Ω —Ç–∞ –∑–Ω–∞—á–µ–Ω—å (–¥—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç). –ö–æ–∂–Ω–∞ –ø–∞—Ä–∞ —ñ–º–µ–Ω —Ç–∞ –∑–Ω–∞—á–µ–Ω—å –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ 
// –æ–±'—î–∫—Ç–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤ –æ–±‚Äô—î–∫—Ç—ñ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó, —è–∫—â–æ –≤—ñ–Ω –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —É –ø–æ–≤–µ—Ä–Ω—É—Ç–æ–º—É –º–∞—Å–∏–≤—ñ.
// –ù–∞–ø—Ä–∏–∫–ª–∞–¥,
// whatIsInAName([{ first: "Romeo", last: "Montague" }, 
//                { first: "Mercutio", last: null }, 
//                { first: "Tybalt", last: "Capulet" }], { last: "Capulet" }) 
//               // [{ first: "Tybalt", last: "Capulet" }]
// function whatIsInAName(collection, source) {
//   const sourceKeys = Object.keys(source);
//   // filter the collection
//   return collection.filter(obj => {
//     for (let i = 0; i < sourceKeys.length; i++) {
//       if (obj[sourceKeys[i]] !== source[sourceKeys[i]]) {
//         return false;
//       }
//     }
//     return true;
//   });
// }
// --------------------2-------------------------------------
// function whatIsInAName(collection, source) {
//   const sourceKeys = Object.keys(source);
//   console.log(sourceKeys);
//   return collection
//     .filter(obj => sourceKeys
//       .every(key => obj[key] === source[key]));
// }
// console.log(whatIsInAName([{ first: "Romeo", last: "Montague" }, 
//                { first: "Mercutio", last: null }, 
//                { first: "Tybalt", last: "Capulet" }], { last: "Capulet" }) );

// 5Ô∏è‚É£–®–∞—à–ª–∏—á–Ω–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä
// –ü–µ—Ä–µ—Ç–≤–æ—Ä—ñ—Ç—å —Ä—è–¥–æ–∫ –≤ —à–∞—à–ª–∏—á–Ω–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä. –£ —à–∞—à–ª–∏—á–Ω–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ 
// –≤—Å—ñ-—Å–ª–æ–≤–∞-–≤-–Ω–∏–∂–Ω—å–æ–º—É-—Ä–µ–≥—ñ—Å—Ç—Ä—ñ-—Ç–∞-—Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ-—Ä–∏—Å–∫–æ—é.
// function spinalCase(str) {
//   return str
//     .split(/\s|_|(?=[A-Z])/)
//     .join("-")
//     .toLowerCase();
// }
// console.log(spinalCase('This Is Spinal Tap')); // this-is-spinal-tap

// 6Ô∏è‚É£–ü–æ—Ä–æ—Å—è—á–∞ –ª–∞—Ç–∏–Ω–∞
// –ü–æ—Ä–æ—Å—è—á–∞ –ª–∞—Ç–∏–Ω–∞ ‚Äî —Ü–µ —Å–ø–æ—Å—ñ–± —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤. –ü—Ä–∞–≤–∏–ª–∞ —Ç–∞–∫—ñ:
// - –Ø–∫—â–æ —Å–ª–æ–≤–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ø—Ä–∏–≥–æ–ª–æ—Å–Ω–æ–≥–æ –∑–≤—É–∫—É, —Ç–æ –ø–µ—Ä—à–∏–π –ø—Ä–∏–≥–æ–ª–æ—Å–Ω–∏–π –∞–±–æ 
// —Å–ø–æ–ª—É—á–µ–Ω–Ω—è –ø—Ä–∏–≥–æ–ª–æ—Å–Ω–∏—Ö –ø–µ—Ä–µ–º—ñ—â—É—é—Ç—å—Å—è –≤ –∫—ñ–Ω–µ—Ü—å —Å–ª–æ–≤–∞ —ñ –¥–æ–¥–∞—î—Ç—å—Å—è ay.
// - –Ø–∫—â–æ —Å–ª–æ–≤–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –≥–æ–ª–æ—Å–Ω–æ–≥–æ –∑–≤—É–∫—É, —Ç–æ –≤–∫—ñ–Ω—Ü—ñ –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞—î—Ç—å—Å—è way.
// –ü–µ—Ä–µ–∫–ª–∞–¥—ñ—Ç—å –ø–æ–¥–∞–Ω–∏–π —Ä—è–¥–æ–∫ –Ω–∞ –ø–æ—Ä–æ—Å—è—á—É –ª–∞—Ç–∏–Ω—É. –í—ñ–¥–æ–º–æ, —â–æ –ø—Ä–∏ –≤–≤–æ–¥—ñ –≤—Å—ñ —Ä—è–¥–∫–∏ 
// –±—É–¥—É—Ç—å —Å–∫–ª–∞–¥–∞—Ç–∏—Å—å –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤ —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ.
// function translatePigLatin(str) {
//   let consonantRegex = /^[^aeiou]+/;
//   let myConsonants = str.match(consonantRegex);
//   return myConsonants !== null
//     ? str
//         .replace(consonantRegex, "")
//         .concat(myConsonants)
//         .concat("ay")
//     : str.concat("way");
// }
// --------------2------------------------------------------------------
// function translatePigLatin(str) {
//   if (str.match(/^[aeiou]/)) return str + "way";
//   const consonantCluster = str.match(/^[^aeiou]+/)[0];
//   return str.substring(consonantCluster.length) + consonantCluster + "ay";
// }
// ---------------3------------------------------------------------------
// function translatePigLatin(str, charPos = 0) {
//   return ['a', 'e', 'i', 'o', 'u'].includes(str[0])
//     ? str + (charPos === 0 ? 'way' : 'ay')
//     : charPos === str.length
//       ? str + 'ay'
//       : translatePigLatin(str.slice(1) + str[0], charPos + 1);
// }
// console.log(translatePigLatin("consonant"));

// 7Ô∏è‚É£–ü–æ—à—É–∫ —Ç–∞ –∑–∞–º—ñ–Ω–∞
// function myReplace(str, before, after) {
//   let index = str.indexOf(before);
//   if (str[index] === str[index].toUpperCase()) {
//     after = after.charAt(0).toUpperCase() + after.slice(1);
//   } else {
//     after = after.charAt(0).toLowerCase() + after.slice(1);
//   }
//   str = str.replace(before, after);
//   return str;
// }
// ---------------------2--------------------------------------------------
// function myReplace(str, before, after) {
//   const strArr = str.split(" ");
//   const wordToReplace = strArr.filter(item => item === before);
//   const replacement = wordToReplace[0] === wordToReplace[0].toUpperCase()
//     ? after[0].toUpperCase() + after.slice(1)
//     : after[0].toLowerCase() + after.slice(1);
//   return strArr.map(item => (item === before ? replacement : item)).join(" ");
// }
// console.log(myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped")); // A quick brown fox leaped over the lazy dog

// 8Ô∏è‚É£–§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–∞—Ä –î–ù–ö
// function pairElement(str) {
//   const matchWithBasePair = function(char) {
//     switch (char) {
//       case "A":
//         return ["A", "T"];
//       case "T":
//         return ["T", "A"];
//       case "C":
//         return ["C", "G"];
//       case "G":
//         return ["G", "C"];
//     }
//   };
//   const pairs = [];
//   for (let i = 0; i < str.length; i++) {
//     pairs.push(matchWithBasePair(str[i]));
//   }
//   return pairs;
// }
// // -----------------------2-------------------------------------------
// function pairElement(str) {
//   const pairs = {
//     A: "T",
//     T: "A",
//     C: "G",
//     G: "C"
//   };
//   return str
//     .split("")
//     .map(x => [x, pairs[x]]);
// }
// console.log(pairElement("GCG")); // [["G", "C"], ["C","G"], ["G", "C"]]

// 9Ô∏è‚É£–ü—Ä–æ–ø—É—â–µ–Ω—ñ –ª—ñ—Ç–µ—Ä–∏
// –ó–Ω–∞–π–¥—ñ—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—É –ª—ñ—Ç–µ—Ä—É –≤ –ø–µ—Ä–µ–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –ª—ñ—Ç–µ—Ä —Ç–∞ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å —ó—ó.
// –Ø–∫—â–æ —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –Ω–∞—è–≤–Ω—ñ –≤—Å—ñ –ª—ñ—Ç–µ—Ä–∏, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å undefined.
// function fearNotLetter(str) {
//   for (let i = 0; i < str.length; i++) {
//     const charCode = str.charCodeAt(i);
//     if (charCode !== str.charCodeAt(0) + i) {
//       return String.fromCharCode(charCode - 1);
//     }
//   }
//   return undefined;
// }
// ------------------2---------------------------
// function fearNotLetter(str) {
//   for (let i = 1; i < str.length; i++) {
//     if (str.charCodeAt(i) - str.charCodeAt(i - 1) > 1) {
//       return String.fromCharCode(str.charCodeAt(i - 1) + 1);
//     }
//   }
// }
// console.log(fearNotLetter("abce")); // d

// üîü–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É
// function uniteUnique(arr) {
//   const args = [...arguments];
//   const result = [];
//   for (let i = 0; i < args.length; i++) {
//     for (let j = 0; j < args[i].length; j++) {
//       if (!result.includes(args[i][j])) {
//         result.push(args[i][j]);
//       }
//     }
//   }
//   return result;
// }
// console.log(uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1])); // [1, 3, 2, 5, 4]

// 1Ô∏è‚É£1Ô∏è‚É£–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è HTML
// –ü–µ—Ä–µ—Ç–≤–æ—Ä—ñ—Ç—å —Å–∏–º–≤–æ–ª–∏ &, <, >, " (–ø–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏) —Ç–∞ ' (–∞–ø–æ—Å—Ç—Ä–æ—Ñ) —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è
// —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è HTML.
// function convertHTML(str) {
//   var temp = str.split("");
//   for (var i = 0; i < temp.length; i++) {
//     switch (temp[i]) {
//       case "<":
//         temp[i] = "&lt;";
//         break;
//       case "&":
//         temp[i] = "&amp;";
//         break;
//       case ">":
//         temp[i] = "&gt;";
//         break;
//       case '"':
//         temp[i] = "&quot;";
//         break;
//       case "'":
//         temp[i] = "&apos;";
//         break;
//     }
//   }
//   temp = temp.join("");
//   return temp;
// }
// console.log(convertHTML("Dolce & Gabbana")); // Dolce &amp; Gabbana

// 1Ô∏è‚É£2Ô∏è‚É£–°—É–º–∞ –≤—Å—ñ—Ö –Ω–µ–ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª –§—ñ–±–æ–Ω–∞—á—á—ñ
// –ú–∞—é—á–∏ –¥–æ–¥–∞—Ç–Ω—î —Ü—ñ–ª–µ —á–∏—Å–ª–æ num, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å —Å—É–º—É –≤—Å—ñ—Ö –Ω–µ–ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª –§—ñ–±–æ–Ω–∞—á—á—ñ, 
// —è–∫—ñ –º–µ–Ω—à—ñ —á–∏ –¥–æ—Ä—ñ–≤–Ω—é—é—Ç—å num. –ü–µ—Ä—à–∏–º–∏ –¥–≤–æ–º–∞ —á–∏—Å–ª–∞–º–∏ –≤ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –§—ñ–±–æ–Ω–∞—á—á—ñ 
// —î 0 —Ç–∞ 1. –ö–æ–∂–Ω–µ –¥–æ–¥–∞—Ç–∫–æ–≤–µ —á–∏—Å–ª–æ —É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ —î —Å—É–º–æ—é –¥–≤–æ—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —á–∏—Å–µ–ª. 
// –ü–µ—Ä—à–∏–º–∏ —Å—ñ–º–æ–º–∞ —á–∏—Å–ª–∞–º–∏ –≤ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –§—ñ–±–æ–Ω–∞—á—á—ñ —î 1, 1, 2, 3, 5 —ñ 8.
// function sumFibs(num) {
//   let prevNumber = 0;
//   let currNumber = 1;
//   let result = 0;
//   while (currNumber <= num) {
//     if (currNumber % 2 !== 0) {
//       result += currNumber;
//     }
//     currNumber += prevNumber;
//     prevNumber = currNumber - prevNumber;
//   }
//   return result;
// }
// console.log(sumFibs(4)); // 5

// 1Ô∏è‚É£3Ô∏è‚É£–°—É–º–∞ –≤—Å—ñ—Ö –ø—Ä–æ—Å—Ç–∏—Ö —á–∏—Å–µ–ª
// –ü—Ä–æ—Å—Ç–µ —á–∏—Å–ª–æ ‚Äî —Ü–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ, —è–∫–µ –±—ñ–ª—å—à–µ –∑–∞ 1 —Ç–∞ –º–∞—î –¥–≤–∞ –¥—ñ–ª—å–Ω–∏–∫–∏: 1 —ñ 
// —Å–∞–º–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 2 —î –ø—Ä–æ—Å—Ç–∏–º —á–∏—Å–ª–æ–º, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–æ –¥—ñ–ª–∏—Ç—å—Å—è –ª–∏—à–µ 
// –Ω–∞ 1 —ñ 2. –Ü –Ω–∞–≤–ø–∞–∫–∏, 4 –Ω–µ —î –ø—Ä–æ—Å—Ç–∏–º —á–∏—Å–ª–æ–º, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–æ –¥—ñ–ª–∏—Ç—å—Å—è –Ω–∞ 1, 2 —ñ 4.
// –ü–µ—Ä–µ–ø–∏—à—ñ—Ç—å sumPrimes —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –ø–æ–≤–µ—Ä—Ç–∞–ª–∞—Å—è —Å—É–º–∞ –≤—Å—ñ—Ö –ø—Ä–æ—Å—Ç–∏—Ö —á–∏—Å–µ–ª, —è–∫—ñ 
// –º–µ–Ω—à—ñ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—é—Ç—å num.
// function sumPrimes(num) {
//   let primes = [];
//   for (let i = 2; i <= num; i++) {
//     if (primes.every((prime) => i % prime !== 0))
//       primes.push(i);
//   }
//   return primes.reduce((sum, prime) => sum + prime, 0);
// }
// ------------------------2--------------------------------
// function sumPrimes(num) {
//   function isPrime(num) {
//     const sqrt = Math.sqrt(num);
//     for (let i = 2; i <= sqrt; i++) {
//       if (num % i === 0)
//         return false;
//     }
//     return true;
//   }
//   let sum = 0;
//   for (let i = 2; i <= num; i++) {
//     if (isPrime(i))
//       sum += i;
//   }
//   return sum;
// }
// console.log(sumPrimes(10)); // 17

// 1Ô∏è‚É£4Ô∏è‚É£–ù–∞–π–º–µ–Ω—à–µ —Å–ø—ñ–ª—å–Ω–µ –∫—Ä–∞—Ç–Ω–µ
// function smallestCommons(arr) {
//   const [min, max] = arr.sort((a, b) => a - b);
//   const numberDivisors = max - min + 1;
//   let upperBound = 1;
//   for (let i = min; i <= max; i++) {
//     upperBound *= i;
//   }
//   for (let multiple = max; multiple <= upperBound; multiple += max) {
//     let divisorCount = 0;
//     for (let i = min; i <= max; i++) {
//       if (multiple % i === 0) {
//         divisorCount += 1;
//       }
//     }
//     if (divisorCount === numberDivisors) {
//       return multiple;
//     }
//   }
// }
// console.log(smallestCommons([1, 5])); // 60

// 1Ô∏è‚É£5Ô∏è‚É£–û–±–ª–∏—à—Ç–µ
// –ü–µ—Ä–µ–±–µ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ arr —Ç–∞ –≤–∏–ª—É—á—ñ—Ç—å –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ 
// (—ñ–Ω–¥–µ–∫—Å 0), –¥–æ–ø–æ–∫–∏ —Ñ—É–Ω–∫—Ü—ñ—è func –Ω–µ –ø–æ–≤–µ—Ä–Ω–µ true, –∫–æ–ª–∏ —ñ—Ç–µ—Ä–æ–≤–∞–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–π–¥–µ –∫—Ä—ñ–∑—å.
// –ü–æ—Ç—ñ–º –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å —Ä–µ—à—Ç—É –º–∞—Å–∏–≤—É, —è–∫—â–æ —É–º–æ–≤—É –≤–∏–∫–æ–Ω–∞–Ω–æ. –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É arr –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è 
// —É –≤–∏–≥–ª—è–¥—ñ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –º–∞—Å–∏–≤—É.
// function dropElements(arr, func) {
//   while (arr.length > 0 && !func(arr[0])) {
//     arr.shift();
//   }
//   return arr;
// }
// // --------------------------------2------------------------------------------
// function dropElements(arr, func) {
//   return arr.length > 0 && !func(arr[0])
//     ? (dropElements(arr.slice(1), func))
//     : arr;
// }
// console.log(dropElements([1, 2, 3, 4], function(n) {return n >= 3})); // [3, 4]

// 1Ô∏è‚É£6Ô∏è‚É£–ù–µ–∑–¥–æ–ª–∞–Ω–Ω–∞ —Å–∏–ª–∞
// –í–∏—Ä—ñ–≤–Ω—è–π—Ç–µ –≤–∫–ª–∞–¥–µ–Ω–∏–π –º–∞—Å–∏–≤. –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ä—ñ–≤–Ω—ñ –≤–∫–ª–∞–¥–µ–Ω–Ω—è.
// function steamrollArray(arr) {
//   const flattenedArray = [];
//   for (let i = 0; i < arr.length; i++) {
//     if (Array.isArray(arr[i])) {
//       flattenedArray.push(...steamrollArray(arr[i]));
//     } else {
//       flattenedArray.push(arr[i]);
//     }
//   }
//   return flattenedArray;
// };
// console.log(steamrollArray([1, [2], [3, [[4]]]])); // [1, 2, 3, 4]

// 1Ô∏è‚É£7Ô∏è‚É£–ë—ñ–Ω–∞—Ä–Ω—ñ –∞–≥–µ–Ω—Ç–∏
// –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∏–π –±—ñ–Ω–∞—Ä–Ω–∏–π —Ä—è–¥–æ–∫, –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é.
// –ë—ñ–Ω–∞—Ä–Ω–∏–π —Ä—è–¥–æ–∫ –±—É–¥–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–π –ø—Ä–æ–±—ñ–ª–æ–º.
// function binaryAgent(str) {
//   return String.fromCharCode(
//     ...str.split(" ").map(function(char) {
//       return parseInt(char, 2);
//     })
//   );
// }
// // ------------------2----------------------
// function binaryAgent(str) {
//   var biString = str.split(" ");
//   var uniString = [];
//   for (var i = 0; i < biString.length; i++) {
//     uniString.push(String.fromCharCode(parseInt(biString[i], 2)));
//   }
//   return uniString.join("");
// }
// console.log(binaryAgent(
//   "01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111"
// )); // Aren't bonfires fun!?

// 1Ô∏è‚É£8Ô∏è‚É£–£—Å–µ –≤—ñ—Ä–Ω–æ
// –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç (–¥—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç) —î —ñ—Å—Ç–∏–Ω–Ω–∏–º –¥–ª—è —É—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∫–æ–ª–µ–∫—Ü—ñ—ó (–ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç).
// function truthCheck(collection, pre) {
//   let counter = 0;
//   for (let c in collection) {
//     if (collection[c].hasOwnProperty(pre) && Boolean(collection[c][pre])) {
//       counter++;
//     }
//   }
//   return counter == collection.length;
// }
// -----------------------------2----------------------------------------------
// function truthCheck(collection, pre) {
//   return collection.every(obj => obj[pre]);
// }
// console.log(truthCheck([{ name: "Quincy", role: "Founder", isBot: false }, { name: "Naomi", role: "", isBot: false }, { name: "Camperbot", role: "Bot", isBot: true }], "isBot")); // false

// 1Ô∏è‚É£9Ô∏è‚É£–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
// –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –¥–æ–¥–∞—î –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –ª–∏—à–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç, —Ç–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, 
// —è–∫–∞ –æ—á—ñ–∫—É—î –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É.
// –ù–∞–ø—Ä–∏–∫–ª–∞–¥, addTogether(2, 3) –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ 5, –∞ addTogether(2) –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é.
// –Ø–∫—â–æ –∂–æ–¥–µ–Ω –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ —î –¥—ñ–π—Å–Ω–∏–º —á–∏—Å–ª–æ–º, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å undefined.
// function addTogether() {
//   const [first, second] = arguments;
//   if (typeof (first) === "number") {
//     if (typeof (second) === "number") return first + second;
//     if (arguments.length === 1) return (second) => addTogether(first, second);
//   }
// }
// console.log(addTogether(2,3)); // 5
// console.log(addTogether(2, "3")); // undefined

// 2Ô∏è‚É£0Ô∏è‚É£–°—Ç–≤–æ—Ä—ñ—Ç—å –ª—é–¥–∏–Ω—É
// –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–±‚Äô—î–∫—Ç–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–∞–≤–µ–¥–µ–Ω—ñ –Ω–∏–∂—á–µ –º–µ—Ç–æ–¥–∏:
// getFirstName()
// getLastName()
// getFullName()
// setFirstName(first)
// setLastName(last)
// setFullName(first, last)
// const Person = function(first, last) {
//   let firstName = first;
//   let lastName  = last;
//   //---------------------------------
//   this.getFirstName = function() {
//     return firstName;
//   };
//   //----------------------------------
//   this.getLastName = function() {
//     return lastName;
//   };
//   //-----------------------------------------------------
//   this.getFullName = function() {
//     return this.getFirstName() + " " + this.getLastName();
//   };
//   //-------------------------------------------------------
//   this.setFirstName = function(first) {
//     return firstName = first;
//   };
//   //-------------------------------------------------------
//   this.setLastName = function(last) {
//     return lastName = last;
//   };
//   //-------------------------------------------------------
//   this.setFullName = function(first, last) {
//     this.setFirstName(first);
//     this.setLastName(last);
//     return this.getFullName();
//   };
// };
// const bob = new Person("Bob", "Ross");
// console.log(bob.getFullName()); // Bob Ross

//2Ô∏è‚É£1Ô∏è‚É£–ö–∞—Ä—Ç–∞ –æ—Ä–±—ñ—Ç
// –ó–≥—ñ–¥–Ω–æ –∑ —Ç—Ä–µ—Ç—ñ–º –∑–∞–∫–æ–Ω–æ–º –ö–µ–ø–ª–µ—Ä–∞, –æ—Ä–±—ñ—Ç–∞–ª—å–Ω–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º  T
// –¥–≤–æ—Ö —Ç–æ—á–∫–æ–≤–∏—Ö –º–∞—Å, —â–æ –æ–±–µ—Ä—Ç–∞—é—Ç—å—Å—è –Ω–∞–≤–∫–æ–ª–æ –æ–¥–Ω–∞ –æ–¥–Ω–æ—ó –ø–æ –∫—Ä—É–≥–æ–≤—ñ–π –∞–±–æ –µ–ª—ñ–ø—Ç–∏—á–Ω—ñ–π –æ—Ä–±—ñ—Ç—ñ, —î:
// T=2œÄa3Œº‚àí‚àí‚àí‚àö 
// a ‚Äî –≤–µ–ª–∏–∫–∞ –ø—ñ–≤–≤—ñ—Å—å –æ—Ä–±—ñ—Ç–∏
// Œº=GM ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ–π–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
// G ‚Äî –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ–π–Ω–∞ —Å—Ç–∞–ª–∞,
// M ‚Äî –º–∞—Å–∞ –º–∞—Å–∏–≤–Ω—ñ—à–æ–≥–æ —Ç—ñ–ª–∞.
// –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —è–∫–∏–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î —Å–µ—Ä–µ–¥–Ω—é –≤–∏—Å–æ—Ç—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É —ó—Ö–Ω—ñ –æ—Ä–±—ñ—Ç–∞–ª—å–Ω—ñ 
// –ø–µ—Ä—ñ–æ–¥–∏ (—É —Å–µ–∫—É–Ω–¥–∞—Ö).
// –ú–∞—Å–∏–≤ –º—ñ—Å—Ç–∏—Ç–∏–º–µ –æ–±‚Äô—î–∫—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ {name: 'name', avgAlt: avgAlt}.
// –ó–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —Ü—ñ–ª–æ–≥–æ —á–∏—Å–ª–∞. –¢—ñ–ª–æ, –Ω–∞–≤–∫–æ–ª–æ —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ 
// –æ–±–µ—Ä—Ç–∞—Ç–∏—Å—è, ‚Äî –ó–µ–º–ª—è.
// –†–∞–¥—ñ—É—Å –ó–µ–º–ª—ñ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å 6367.4447 –∫—ñ–ª–æ–º–µ—Ç—Ä—ñ–≤, –∞ –∑–Ω–∞—á–µ–Ω–Ω—è GM –ó–µ–º–ª—ñ ‚Äî 398600.4418 –∫–º3—Å-2.
// function orbitalPeriod(arr) {
//   const GM = 398600.4418;
//   const earthRadius = 6367.4447;
//   const a = 2 * Math.PI;
//   const newArr = [];
//   const getOrbPeriod = function(obj) {
//     const c = Math.pow(earthRadius + obj.avgAlt, 3);
//     const b = Math.sqrt(c / GM);
//     const orbPeriod = Math.round(a * b);
//     return {name: obj.name, orbitalPeriod: orbPeriod};
//   };
//   for (let elem in arr) {
//     newArr.push(getOrbPeriod(arr[elem]));
//   }
//   return newArr;
// }
// console.log(orbitalPeriod([{ name: "sputnik", avgAlt: 35873.5553 }])); // [{name: "sputnik", orbitalPeriod: 86400}]

// ‚ùó‚ùó‚ùó–ü—Ä–æ—î–∫—Ç–∏ ¬´–ê–ª–≥–æ—Ä–∏—Ç–º–∏ JavaScript —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö¬ª
//1Ô∏è‚É£–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º—É
// –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å true, —è–∫—â–æ –∑–∞–¥–∞–Ω–∏–π —Ä—è–¥–æ–∫ —î –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º. –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å false.
// function palindrome(str) {
//  const alphanumericStr = str.replace(/[\W_]/g, '');
//  const lowercaseStr = alphanumericStr.toLowerCase();
//  const reversedStr = lowercaseStr.split('').reverse().join('');
//  return lowercaseStr === reversedStr;
// }
// console.log(palindrome("eye")); // true

//2Ô∏è‚É£–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ä–∏–º—Å—å–∫–∏—Ö —á–∏—Å–µ–ª
// –ü–µ—Ä–µ—Ç–≤–æ—Ä—ñ—Ç—å –ø–æ–¥–∞–Ω–µ —á–∏—Å–ª–æ –≤ —Ä–∏–º—Å—å–∫–µ —á–∏—Å–ª–æ.
// –í—Å—ñ —Ä–∏–º—Å—å–∫—ñ —á–∏—Å–ª–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–º–∏ –≤–µ–ª–∏–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏.
// function convertToRoman(num) {
//   const romanNumerals = {
//     M: 1000,
//     CM: 900,
//     D: 500,
//     CD: 400,
//     C: 100,
//     XC: 90,
//     L: 50,
//     XL: 40,
//     X: 10,
//     IX: 9,
//     V: 5,
//     IV: 4,
//     I: 1,
//   };
//   let result = '';
//   for (let key in romanNumerals) {
//     while (num >= romanNumerals[key]) {
//       result += key;
//       num -= romanNumerals[key];
//     }
//   }
//   return result;
// }
// console.log(convertToRoman(36)); // XXXVI

//3Ô∏è‚É£–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è
// –û–¥–Ω–∏–º –∑ –Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∏—Ö —ñ –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∏—Ö —à–∏—Ñ—Ä—ñ–≤ —î —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è, —Ç–∞–∫–æ–∂ –≤—ñ–¥–æ–º–∏–π 
// —è–∫ —à–∏—Ñ—Ä –∑—Å—É–≤—É. –£ —à–∏—Ñ—Ä—ñ –∑—Å—É–≤—É –∑–Ω–∞—á–µ–Ω–Ω—è –ª—ñ—Ç–µ—Ä–∏ –∑–º—ñ—â–µ–Ω–µ –Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å.
// –ß–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —à–∏—Ñ—Ä ROT13, —è–∫–∏–π –∑–º—ñ—â—É—î –ª—ñ—Ç–µ—Ä—É –Ω–∞ 13 –º—ñ—Å—Ü—å. –¢–∞–∫–∏–º —á–∏–Ω–æ–º, 
// A ‚Üî N, B ‚Üî O —ñ —Ç–∞–∫ –¥–∞–ª—ñ.
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫ ROT13 —è–∫ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–µ–∫–æ–¥–æ–≤–∞–Ω–∏–π.
// –í—Å—ñ –ª—ñ—Ç–µ—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤–µ–ª–∏–∫–∏–º–∏. –ù–µ –∑–∞–º—ñ–Ω—é–π—Ç–µ –Ω–µ–∞–ª—Ñ–∞–≤—ñ—Ç–Ω—ñ —Å–∏–º–≤–æ–ª–∏ (–ø—Ä–æ–±—ñ–ª–∏, –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó), 
// –∞–ª–µ –ø–µ—Ä–µ–Ω–µ—Å—ñ—Ç—å —ó—Ö.
// function rot13(str) {
//   const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
//   return str
//     .split('')
//     .map(char => {
//       const isLetter = /[A-Z]/.test(char);
//       if (isLetter) {
//         const index = alphabet.indexOf(char);
//         const newIndex = (index + 13) % 26;
//         return alphabet[newIndex];
//       } else {
//         return char;
//       }
//     })
//     .join('');
// }
// console.log(rot13("SERR PBQR PNZC")); // FREE CODE CAMP

//4Ô∏è‚É£–í–∞–ª—ñ–¥–∞—Ç–æ—Ä –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
// –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å true, —è–∫—â–æ –Ω–∞–¥–∞–Ω–∏–π —Ä—è–¥–æ–∫ –≤–∏–≥–ª—è–¥–∞—î —è–∫ –¥—ñ–π—Å–Ω–∏–π –º–æ–±—ñ–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –°–®–ê.
// –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø–æ–ª–µ —Ñ–æ—Ä–º–∏ –≤ –±—É–¥—å-—è–∫–∏–π —Å–ø–æ—Å—ñ–±, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –º–∞—î —Ñ–æ—Ä–º–∞—Ç 
// –¥—ñ–π—Å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –°–®–ê. –ù–∏–∂—á–µ –Ω–∞–≤–µ–¥–µ–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –¥—ñ–π—Å–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –Ω–æ–º–µ—Ä—ñ–≤ –°–®–ê 
// (–¥–ª—è —ñ–Ω—à–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ø–æ—Å–∏–ª–∞–π—Ç–µ—Å—å –Ω–∞ —Ç–µ—Å—Ç–∏, –ø–æ–¥–∞–Ω—ñ –Ω–∏–∂—á–µ):
// 555-555-5555
// (555)555-5555
// (555) 555-5555
// 555 555 5555
// 5555555555
// 1 555 555 5555
// –£ —Ü—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ –≤–∞–º –±—É–¥–µ –Ω–∞–¥–∞–Ω–æ —Ä—è–¥–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 800-692-7753 –∞–±–æ 8oo-six427676;laskdjf). 
// –í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–±–æ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –º–æ–±—ñ–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –°–®–ê –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±—É–¥—å-—è–∫–æ—ó –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó 
// —Ñ–æ—Ä–º–∞—Ç—ñ–≤, –Ω–∞–¥–∞–Ω–∏—Ö –≤–∏—â–µ. –ö–æ–¥ –∑–æ–Ω–∏ –Ω—É–º–µ—Ä–∞—Ü—ñ—ó —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º. –Ø–∫—â–æ –Ω–∞–¥–∞–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –∫–æ–¥ –∫—Ä–∞—ó–Ω–∏, 
// —Ç–æ –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏, —â–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–º –∫–æ–¥–æ–º –∫—Ä–∞—ó–Ω–∏ —î 1. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å true, —è–∫—â–æ —Ä—è–¥–æ–∫ —î 
// –¥—ñ–π—Å–Ω–∏–º –º–æ–±—ñ–ª—å–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º –°–®–ê; –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å false.
// function telephoneCheck(str) {
//   const phoneRegex = /^(1\s?)?(\(\d{3}\)|\d{3})([\s\-]?)\d{3}([\s\-]?)\d{4}$/;
//   return phoneRegex.test(str);
// }
// console.log(telephoneCheck("555-555-5555")); // true

//5Ô∏è‚É£–ö–∞—Å–æ–≤–∏–π –∞–ø–∞—Ä–∞—Ç
// –†–æ–∑—Ä–æ–±—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∫–∞—Å–æ–≤–æ–≥–æ –∞–ø–∞—Ä–∞—Ç—É checkCashRegister(), —è–∫–∞ –ø—Ä–∏–π–º–∞—î —Ü—ñ–Ω—É –ø–æ–∫—É–ø–∫–∏ —è–∫ 
// –ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç (price), –æ–ø–ª–∞—Ç—É —è–∫ –¥—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç (cash) —Ç–∞ —Å—É–º—É –≥–æ—Ç—ñ–≤–∫–∏ –≤ –∫–∞—Å—ñ —è–∫ 
// —Ç—Ä–µ—Ç—ñ–π –∞—Ä–≥—É–º–µ–Ω—Ç (cid).
// cid ‚Äî —Ü–µ 2D –º–∞—Å–∏–≤, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±—ñ–≥—É.
// –§—É–Ω–∫—Ü—ñ—è checkCashRegister() –∑–∞–≤–∂–¥–∏ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –æ–±‚Äô—î–∫—Ç –∑ –∫–ª—é—á–µ–º status —Ç–∞ –∫–ª—é—á–µ–º change.
// –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å {status: "INSUFFICIENT_FUNDS", change: []}, —è–∫—â–æ —Å—É–º–∞ –≥–æ—Ç—ñ–≤–∫–∏ –≤ –∫–∞—Å—ñ –º–µ–Ω—à–∞ –∑–∞ –∑–¥–∞—á—É, 
// –∞–±–æ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–¥–∞—Ç–∏ –∑–¥–∞—á—É.
// –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å {status: "CLOSED", change: [...]} –∑ —Å—É–º–æ—é –≤ –∫–∞—Å—ñ —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—é—á–∞ change, —è–∫—â–æ –≤–æ–Ω–æ 
// –¥–æ—Ä—ñ–≤–Ω—é—î –∑–¥–∞—á—ñ.
// –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å {status: "OPEN", change: [...]} –∑—ñ –∑–¥–∞—á–µ—é –≤ –º–æ–Ω–µ—Ç–∞—Ö —ñ –±–∞–Ω–∫–Ω–æ—Ç–∞—Ö, 
// –≤ –ø–æ—Ä—è–¥–∫—É –≤—ñ–¥ –Ω–∞–π–±—ñ–ª—å—à–æ—ó –¥–æ –Ω–∞–π–º–µ–Ω—à–æ—ó, —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—é—á–∞ change.
// –ì—Ä–æ—à–æ–≤–∏–π –æ–±—ñ–≥	–°—É–º–∞
// –ü–µ–Ω–Ω—ñ	$0.01 (–ü–ï–ù–ù–Ü)
// –ù—ñ–∫–µ–ª—å	$0.05 (–ù–Ü–ö–ï–õ–¨)
// –î–∞–π–º	$0.1 (–î–ê–ô–ú)
// –ß–≤–µ—Ä—Ç—å	$0.25 (–ß–í–ï–†–¢–¨)
// –î–æ–ª–∞—Ä	$1 (–û–î–ò–ù)
// –ü‚Äô—è—Ç—å –¥–æ–ª–∞—Ä—ñ–≤	$5 (–ü‚Äô–Ø–¢–¨)
// –î–µ—Å—è—Ç—å –¥–æ–ª–∞—Ä—ñ–≤	$10 (–î–ï–°–Ø–¢–¨)
// –î–≤–∞–¥—Ü—è—Ç—å –¥–æ–ª–∞—Ä—ñ–≤	$20 (–î–í–ê–î–¶–Ø–¢–¨)
// –°—Ç–æ –¥–æ–ª–∞—Ä—ñ–≤	$100 (–°–¢–û)
// –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –Ω–∏–∂—á–µ –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥ –º–∞—Å–∏–≤—É –∑ —Å—É–º–æ—é –≤ –∫–∞—Å—ñ:
// [
//   ["PENNY", 1.01],
//   ["NICKEL", 2.05],
//   ["DIME", 3.1],
//   ["QUARTER", 4.25],
//   ["ONE", 90],
//   ["FIVE", 55],
//   ["TEN", 20],
//   ["TWENTY", 60],
//   ["ONE HUNDRED", 100]
// ]
// function checkCashRegister(price, cash, cid) {
//   const denomination = [10000, 2000, 1000, 500, 100, 25, 10, 5, 1,];
//   function transaction(price, cash, cid) {
//     let changeNeeded = (cash - price) * 100;
//     let moneyProvided = [
//     ["ONE HUNDRED", 0], 
//     ["TWENTY", 0], 
//     ["TEN", 0], 
//     ["FIVE", 0], 
//     ["ONE", 0], 
//     ["QUARTER", 0], 
//     ["DIME", 0], 
//     ["NICKEL", 0], 
//     ["PENNY", 0],
//   ];
//   let availCash = [...cid].reverse().map(el => [el[0], el[1] * 100]);
//   let sumOfCash = availCash.reduce((a, b) => (a + b[1]),0) / 100;
//   if (sumOfCash === changeNeeded / 100) {
//     return {status: "CLOSED", change: [...cid]};
//   }
//   else for (let i = 0; i < availCash.length; i++) {
//       while (denomination[i] <= changeNeeded && availCash[i][1] > 0) {
//         moneyProvided[i][1] += denomination[i];
//         changeNeeded -= denomination[i];
//         availCash[i][1] -= denomination[i];
//       }
//     };
//     let change = moneyProvided
//     .map(el => [el[0], el[1] / 100])
//     .filter(el => el[1] !== 0);
//     let changeTotal = change.reduce((a, b) => (a + b[1]),0);
//     if (changeTotal < changeNeeded) {
//         return {status: "INSUFFICIENT_FUNDS", change: []};
//     }
//     return {status: "OPEN", change};
//   }
//   let answer = transaction(price, cash, cid);
//   return answer;
// };
// // –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
// const result = checkCashRegister(19.5, 20, [
//   ["PENNY", 1.01],
//   ["NICKEL", 2.05],
//   ["DIME", 3.1],
//   ["QUARTER", 4.25],
//   ["ONE", 90],
//   ["FIVE", 55],
//   ["TEN", 20],
//   ["TWENTY", 60],
//   ["ONE HUNDRED", 100]
// ]);
// console.log(result); // {status: 'OPEN', change: [[ 'QUARTER', 0.5 ]]}



















// –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –∑–∞–ª–∏—à–∫–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
// function removeFirstTwo(list) {
//   const [, , ...rest] = list;
//   return rest;
// }
// const source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
// const sourceWithoutFirstTwo = removeFirstTwo(source);
// console.log(removeFirstTwo(source));

// const stats = {
//   max: 56.78,
//   standard_deviation: 4.34,
//   median: 34.54,
//   mode: 23.87,
//   min: -0.75,
//   average: 35.85
// };
// // const half = (stats) => (stats.max + stats.min) / 2.0; 
// const half = ({max, min}) => (max + min) / 2.0;
// console.log(half(stats)); // 28.015

// const result = {
//   success: ["max-length", "no-amd", "prefer-arrow-functions"],
//   failure: ["no-var", "var-on-top", "linebreak"],
//   skipped: ["no-extra-semi", "no-dup-keys"]
// };
// function makeList(arr) {
//   const failureItems = [];
//   for(let i = 0; i < arr.length; i++) {
//     failureItems.push(`<li class="text-warning">${arr[i]}</li>`);
//   }
//   return failureItems;
// };
// const failuresList = makeList(result.failure);
// console.log(failuresList);

// –°–∏–Ω—Ç–∞–∫—Å–∏—Å class –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
// class Vegetable {
//   constructor(name) {
//     this.name = name;
//   }
// };
// const carrot = new Vegetable('carrot');
// console.log(carrot.name); // carrot





// –ó–∞–¥–∞—á–∞ –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏
// function isPossibleToCompose(word, letters) {
  //   const wordMap = {}
  //   const lettersMap = {}
    
  //   for (let i=0; i<word.length; i++){
  //     const char = word[i] 
  //     wordMap[char] = (wordMap[char] || 0) + 1  
  //   }
  
  //   for (let i=0; i<letters.length; i++){
  //     const char = letters[i]
  //     lettersMap[char] = (lettersMap[char] || 0) + 1  
  //   }
    
  //   console.log({
  //     wordMap,
  //     lettersMap,
  //   })
  
  //   for (const char in wordMap) {
  //     if (!lettersMap[char] || lettersMap[char] < wordMap[char]) {
  //       return false
  //     }
  //   }
  
  //   return true
  // }
  
  // console.log(isPossibleToCompose('aa', 'abc')) // false
  // isPossibleToCompose('abc', 'dcba') // true
  // isPossibleToCompose('aabbcc', 'bcabcaddff') // true
  
  // –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –º–æ–∂–Ω–∞ —Å–∫–ª–∞—Å—Ç–∏ —Å–ª–æ–≤–æ word –∑ –ª—ñ—Ç–µ—Ä, —è–∫—ñ —î –≤ —Ä—è–¥–∫—É letters
// function isPossibleToCompose(word, letters) {
//   const foo = function (str) {
//     const obj = {};
//     str.split('').forEach(item => {
//       return obj[item] ? obj[item] += 1 : obj[item] = 1;
//     })
//     return obj;
//   }
//   const objW = foo(word);
//   const objL = foo(letters);
//   return Object.keys(objW).every(item => objW[item] <= (objL[item] || 0))
// }
// console.log(isPossibleToCompose('aa', 'abc')) // false
// console.log(isPossibleToCompose('abc', 'dcba')); // true
// console.log(isPossibleToCompose('aabbcc', 'bcabcaddff')); // true

// –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ñ-—é –¥–ª—è –º–Ω–æ–∂–µ–Ω–Ω—è, –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ * —Ç–∞ Math
// function multiply(a, b) {
//   let result = 0;
//   const isNegative = b < 0; // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ b –≤—ñ–¥‚Äô—î–º–Ω–µ
//   b = Math.abs(b); // –ë–µ—Ä–µ–º–æ –º–æ–¥—É–ª—å b
//   for (let i = 0; i < b; i++) {
//     result += a; // –î–æ–¥–∞—î–º–æ a –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É b —Ä–∞–∑—ñ–≤
//   }
//   return isNegative ? -result : result; // –Ø–∫—â–æ b –±—É–ª–æ –≤—ñ–¥‚Äô—î–º–Ω–µ, —ñ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
// }
// console.log(multiply(3, 4));  // 12
// console.log(multiply(5, -3)); // -15
// console.log(multiply(-2, -6)); // 12
// console.log(multiply(7, 0));  // 0